{"jinzhi.html":{"url":"jinzhi.html","title":"二进制","keywords":"","body":"二进制数 y = x_i^{a_1^2} a^2 + b^2 = c^2 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"./":{"url":"./","title":"GO基础","keywords":"","body":"GolangBasicBook console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"IO/IO.html":{"url":"IO/IO.html","title":"IO","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"IO/byte-Slice2-io.Reader.html":{"url":"IO/byte-Slice2-io.Reader.html","title":"[]byte2io.Reader","keywords":"","body":"bytes.NewReader 可以将 []byte 转为 io.Reader 接口 go doc bytes.NewReader package bytes // import \"bytes\" func NewReader(b []byte) *Reader NewReader returns a new Reader reading from b. go doc io.Reader package io // import \"io\" type Reader interface { Read(p []byte) (n int, err error) } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"OS/OS.html":{"url":"OS/OS.html","title":"OS","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"OS/os-exec.html":{"url":"OS/os-exec.html","title":"exec","keywords":"","body":"package main import ( \"fmt\" \"os/exec\" ) func main() { cmd := exec.Command(\"ls\") out, err := cmd.CombinedOutput() if err != nil { fmt.Println(err) } fmt.Println(string(out)) } go doc exec.Command package exec // import \"os/exec\" func Command(name string, arg ...string) *Cmd go doc exec.Cmd | grep -vE '//|^$' type Cmd struct { Path string Args []string Env []string Dir string Stdin io.Reader Stdout io.Writer Stderr io.Writer ExtraFiles []*os.File SysProcAttr *syscall.SysProcAttr Process *os.Process ProcessState *os.ProcessState } Cmd represents an external command being prepared or run. A Cmd cannot be reused after calling its Run, Output or CombinedOutput methods. func Command(name string, arg ...string) *Cmd func CommandContext(ctx context.Context, name string, arg ...string) *Cmd func (c *Cmd) CombinedOutput() ([]byte, error) func (c *Cmd) Output() ([]byte, error) func (c *Cmd) Run() error func (c *Cmd) Start() error func (c *Cmd) StderrPipe() (io.ReadCloser, error) func (c *Cmd) StdinPipe() (io.WriteCloser, error) func (c *Cmd) StdoutPipe() (io.ReadCloser, error) func (c *Cmd) String() string func (c *Cmd) Wait() error go doc exec.Cmd.CombinedOutput | grep -vE '//|^$' func (c *Cmd) CombinedOutput() ([]byte, error) CombinedOutput runs the command and returns its combined standard output and standard error. console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"file/find.html":{"url":"file/find.html","title":"文件查找","keywords":"","body":"package main import ( \"fmt\" \"log\" \"os\" \"path/filepath\" \"strings\" ) func main() { err := filepath.Walk(\"/opt/bozz/\", func(path string, info os.FileInfo, err error) error { if err != nil { return err } //fmt.Println(path, info.Size()) //fmt.Println(path) //fmt.Println(info.Name()) name := info.Name() //fmt.Println(strings.HasSuffix(name, \"war\")) if strings.HasSuffix(name, \"war\") { fmt.Println(path) } if strings.HasSuffix(name, \"Dockerfile\") { fmt.Println(path) } return nil }) if err != nil { log.Println(err) } } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"basic/basic.html":{"url":"basic/basic.html","title":"数据基础","keywords":"","body":"二进制数 位 和字节 通常都是基于数字10来书写数字。例如2157的千位是2 百位是1 十位是5 个位是7 可以写成: 2 \\times 1000 + 1 \\times 100 + 5 \\times 10 + 7 \\times 1 1000 是10的立方 即三次幂 100是10的平方即2次幂 10是10的一次幂 而10的0次幂是1 因此 2157 也可以写成: 2 \\times 10^3 + 1 \\times 10^2 + 5 \\times 10^1 + 7 \\times 10^0 因为这种书写数字的方法是基于 10 的幂 所以称 以10为基底书写 2157 计算机适用基底为2的数制系统。它用2的幂二不是10的幂，以2为基底表示的数字被称为二进制数 二进制数中的2 和 十进制数中的10作用相同，例如二进制数 1101 可表示为: 1 \\times 2^3 + 1 \\times 2^2 + 0 \\times 2^1 + 1 \\times 2^0 以十进制数表示为: 1 \\times 8 + 1 \\times 4 + 0 \\times 2 + 1 \\times 1 = 13 用二进制系统可以把任意整数(如果有足够的位) 表示为0和1的组合。由于计算机通过关闭 和打开状态的组合来表示信息，这两种状态分别用 0 和 1 来表示，所以使用这套制系统 非常方便 接下来我们来学习二进制系统如何表示1字节的整数 二进制整数 通常 1字节包含8位，在1字节中 编号是7的位被称为高阶位，编号是0的位被称为低级位 每一位的编号对应2的相应的指数 例如 如果 位编号是7的位 二进制数是1 那么它的十进制就是: 1 \\times 2^7 = 128 该字节字能表示的最大数字是把所有位都设置为1:11111111 这个二进制数是: 以2为基底书写 11111111 1 \\times 2^7 + 1 \\times 2^6 + 1 \\times 2^5 + 1 \\times 2^4 + 1 \\times 2^3 + 1 \\times 2^2 + 1 \\times 2^1 + 1 \\times 2^0 128 + 64 + 32 + 16 + 8 + 4 + 2 + 1 = 255 该字节字能表示的最小数字是把所有位都设置为0:00000000 这个二进制数是: 0 \\times 2^7 + 0 \\times 2^6 + 0 \\times 2^5 + 0 \\times 2^4 + 0 \\times 2^3 + 0 \\times 2^2 + 0 \\times 2^1 + 0 \\times 2^0 1 字节 可存储 0-255范围内的数字 总共256个值 或者通过不同方式的解释位组合 程序可以用1字节存储 -128~+127范围内的整数 总共还是256个值 计算节存储数据的单元 bit 位 比特 byte 是 uint8 的别名 rune 是 int32 的别名 https://baike.baidu.com/item/UniCode/750500 https://baike.baidu.com/item/ASCII/309296?fr=aladdin https://baike.baidu.com/item/UTF-8/481798?fr=aladdin console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"docker/docker.html":{"url":"docker/docker.html","title":"docker sdk","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"docker/go-mod.html":{"url":"docker/go-mod.html","title":"go mod","keywords":"","body":"module github.com/yimtun/sshServer go 1.14 require ( github.com/anmitsu/go-shlex v0.0.0-20200502080107-070676123096 // indirect github.com/containerd/containerd v1.3.4 // indirect github.com/docker/distribution v2.7.1+incompatible // indirect github.com/docker/docker v17.12.0-ce-rc1.0.20200508181053-298ba5b13150+incompatible github.com/docker/go-connections v0.4.0 // indirect github.com/docker/go-units v0.4.0 // indirect github.com/gliderlabs/ssh v0.3.0 github.com/gogo/protobuf v1.3.1 // indirect github.com/jhoonb/archivex v0.0.0-20180718040744-0488e4ce1681 github.com/kr/pty v1.1.7 github.com/opencontainers/go-digest v1.0.0 // indirect github.com/opencontainers/image-spec v1.0.1 // indirect github.com/pkg/errors v0.9.1 // indirect github.com/sirupsen/logrus v1.6.0 github.com/tidwall/gjson v1.6.0 // indirect golang.org/x/crypto v0.0.0-20200510223506-06a226fb4e37 // indirect golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3 google.golang.org/grpc v1.29.1 // indirect ) console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"docker/connect-localhost.html":{"url":"docker/connect-localhost.html","title":"connect localhost","keywords":"","body":"package main import ( \"context\" \"fmt\" \"github.com/docker/docker/api/types\" \"github.com/docker/docker/client\" ) func main() { // ctx := context.Background() cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation()) if err != nil { panic(err) } containers, err := cli.ContainerList(context.Background(), types.ContainerListOptions{}) if err != nil { panic(err) } for _, container := range containers { fmt.Println(container.ID) } } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"docker/tls-hard-code.html":{"url":"docker/tls-hard-code.html","title":"tls hard code","keywords":"","body":"package main import ( \"context\" \"fmt\" \"github.com/docker/docker/api/types\" \"github.com/docker/docker/client\" // \"crypto/tls\" \"crypto/x509\" // \"io/ioutil\" \"net/http\" ) var certPem = []byte(`-----BEGIN CERTIFICATE----- MIIGyjCCBLKgAwIBAgIJAL03tsQihQYCMA0GCSqGSIb3DQEBCwUAMEgxCzAJBgNV BAYTAkNOMREwDwYDVQQIDAhTaGFuZ2hhaTESMBAGA1UECgwJV2hvQXJlWW91MRIw EAYDVQQDDAlsei1kb2NrZXIwHhcNMTkxMjA0MDMyOTU2WhcNMjAxMjAzMDMyOTU2 WjARMQ8wDQYDVQQDDAZjbGllbnQwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIK AoICAQC9b+fk6DCwhyODdzbg7mNXBScW6aWQDPxtoRKAIqC12+G9VT3uI5/EHqqW OL5tu5sYkxGJzXqhvGepctiKXV0I0aesRXbVErhNY2VQiw0wzzk7hc36PqDYRwTR TcYhE86757hVsKG+qa9BIWJeTqKPFHPSLAvwymNAZRJIVZvkdWXc18LsqOKlZN7n wwPuBCyniVZiGH7I2kYudX1oEy61VmqVj+vCPJuVqPceb44oabvf3fURQalIiukb lFTmRGfSfiLjXMZPFji/d2t5++wo0ZmtzfuyAJsP6NnMK0yWmZ1Rcyaud0f1O3cs AD4uohUT2PBeufc3ciV663U5aevjXVBQcwjvVBLJMbzf7vDRdRtjLu2Hd7SQiHur 4GIpK3TxPuh938aFMhFbob+sxrjzd3ITYx4HXEUZworDslE/idNCs2JxJfKJoYdh LZHJ0JFeEwL0E8KAMh5g2KNbgxDhhRnPqlwWXMoT3zlUWM9a1VZh2+FDbyquiHCC VX4sQ2nOy5uluZjBe863b/mxSV13FRdDSyZCfsPL6BD1970tHyyd0zhvi77+LwkJ Kuxnf18VQzCceVyveCyV3E8f2iD+kOae6h8/i9TYPhEmkagTkQLRR6zWY7QP6bio B8SeXL6Egn7lhcENyLza9ZCqp7MiPQckLsash3cF6y9E9QWr+QIDAQABo4IB7DCC AegwEwYDVR0lBAwwCgYIKwYBBQUHAwIwggHPBgNVHREEggHGMIIBwocErBBk2IcE ChQAyYcEChQAyocEChQAy4cEChQAzIcEChQAzYcEChQAzocEChQAz4cECv+A9ocE Cv+A7YcECv+A44cECv+Az4cECv+A94cECv+A4IcECv+A6IcECv+A7ocECv+Ak4cE Cv+Aa4cECv+AzocECv+AuYcECv+AyIcECv+AvYcECv+A14cECv+A1YcECv+ArYcE Cv+AfIcECv+Au4cECv+AnocECv+A5ocECv+AhocECv+AeIcECv+Ad4cECv+AoIcE Cv+AuocECv+AzYcECv+AsIcECv+ApocECv+Ag4cECv+ArIcECv+AlIcECv+AkYcE Cv+Al4cECv+AhYcECv+AkIcECv+AgocECv+AyocECv+AmocECv+AeYcECv+AeocE Cv+AfocECv+AgIcECv+Ae4cECv+Af4cECv+AfYcECv+A3YcECv+AlocECv+AhIcE Cv+AjYcECv+AiIcECv+An4cECv+AdIcECv+AdocECv+Ab4cECv+AjocECv+AcocE Cv+ArocECv+A4ocECv+AcIcECv+AvocECv+AdYcECv+AcYcECv+AbIcECv+A1ocE Cv+Ac4cECv+AhzANBgkqhkiG9w0BAQsFAAOCAgEAN6nRSmOp3Rayr2CZAWPm8Km0 rUCpKGKxuDO8cfZ7+NOPCJioBrazzJViEIGJqOeUkxy06od6RqwBkd/ja8u0fvAy Sq4+ycTJjlQTLie29e1a9DK1doXr+UjmlGf9BMWsQxoVy8DXS3odXyrrv/KcH3Hu NXSc55vNzN/XydLlrTo0RsDX42W9X6+3BeBNALM096reNU6aXkon8xYS9ZGv5bYw vmOI0bhpvz8Uz1yGnTvYXNtSaTUZ0klHyCJh7/WgEC12o5LE9BdWwRvZU3/Emm2D C2Ykg1zPZFGfQRD1NQbzxKuZfqpaWW0pwcmOxa6FZPjlsYcjSeLSf4woiGrt65sc fyqNrJ0e4vxRFCTg4puI3Vy4X7Pa0GuM8s+Az7fs54hUoPN2B5KyLbhvUmhh3C2+ 7/fVenGzIMFQ8FVHwCix96jqYHq5Frl0B59fhCsR6aBTnzMMRuhM83dlaIYWHpCX AQYyx2yuZuI7+INqHxJ1A24+kXEXgwWLs+o2D/Xf7g/OJ8u8UQBvKHOz7VLUSoMG j8a/CVr5b5RnEX2eJ9PqHpPsrWbdbbhkLF193UVv1nezTYUSZDU/a8R4KCo1Pqlr gPVVtDA/ni6VwCAizT4JSWlbleca9kZ4jTfW9+H2l1UPOIKXQ4m4jQnUGmCVnU4F ty5Z9eCMSkHmG+aVedY= -----END CERTIFICATE-----`) var keyPem = []byte(`-----BEGIN RSA PRIVATE KEY----- MIIJKQIBAAKCAgEAvW/n5OgwsIcjg3c24O5jVwUnFumlkAz8baESgCKgtdvhvVU9 7iOfxB6qlji+bbubGJMRic16obxnqXLYil1dCNGnrEV21RK4TWNlUIsNMM85O4XN +j6g2EcE0U3GIRPOu+e4VbChvqmvQSFiXk6ijxRz0iwL8MpjQGUSSFWb5HVl3NfC 7KjipWTe58MD7gQsp4lWYhh+yNpGLnV9aBMutVZqlY/rwjyblaj3Hm+OKGm73931 EUGpSIrpG5RU5kRn0n4i41zGTxY4v3drefvsKNGZrc37sgCbD+jZzCtMlpmdUXMm rndH9Tt3LAA+LqIVE9jwXrn3N3Ileut1OWnr411QUHMI71QSyTG83+7w0XUbYy7t h3e0kIh7q+BiKSt08T7ofd/GhTIRW6G/rMa483dyE2MeB1xFGcKKw7JRP4nTQrNi cSXyiaGHYS2RydCRXhMC9BPCgDIeYNijW4MQ4YUZz6pcFlzKE985VFjPWtVWYdvh Q28qrohwglV+LENpzsubpbmYwXvOt2/5sUlddxUXQ0smQn7Dy+gQ9fe9LR8sndM4 b4u+/i8JCSrsZ39fFUMwnHlcr3gsldxPH9og/pDmnuofP4vU2D4RJpGoE5EC0Ues 1mO0D+m4qAfEnly+hIJ+5YXBDci82vWQqqezIj0HJC7GrId3BesvRPUFq/kCAwEA AQKCAgBXBz4lr3YO40axcudHVr1UkQ1wPU7OaujdBI6XR1FFuwpuDOcyrDMNynjc Ip15lCKgm5AHGtsnyoJlGlnY1yOSlZ7OSetZ4AvDodI9umQI9Gp6qfIC8Rq7wYS5 E13efFcRhFbvJwJnsVTOOyQR51ZPHTpIZ+vkZ1ZJkyVfDdVck4KEfqsSRlQ5X6n4 F2OKyWgqX7HLxy0X4Q808Mz4LzfaHyVAKKpKxcVEcCd3WBCbCFhDdJjNoLjAlvCY twB5+RspXMFyaoDAfJj9fUNm+xF3fzN24ZasJBMYsAS/A3VgCpp3fMtcg3gPdY4+ LK5khhng0F09Z3nngw0s91cXVU4Ejr5eeMFAdAfhiR/0imU6+cc45aEvBPbIuykB ra0Su1mJphatHCzYZqi+OnmCF0E1XTKfrkNcZC58JCChBXFZnjT9Xcy5IYRzmucL l4+BTsg29ahOPPGsvBArTCgesIP1t5Bwka3C4wYsu6HoCdfs8o+vPTLU3CMIPrB5 wATF4XnJpj72GA2O7LwVPJTQNVfO0r1ODSYnvyUNY5If05nbXXLVPWo8zjspbD55 GDeVk/600IJxrHnsTS1ecErKiQVSb+wPyLrCLz7wPPpQgafyDQ1QE7fSps6K5Ry+ J8pQmjs+vuj5UMEzyeIJp8JPDNyyvKPSVChz0F8nztCXYfd8sQKCAQEA9FlMaHC2 vcjvYBLvjAv72+e9I+qLg/6KptMRDZ18VOH1JbbLFwcXi0aP+ENutlEZSVjz581+ 29MF569JyZm9Iag/yskWD0XUiWRaxfYvA6rQ1k4zjwWoA4qjxHVs0cDvMhD5On4y 9/zomVzP2Sq5dhzeOXP8RGvj0cpPWOYG3Y71B/KKd7XQHUtmrdMDoH0Q/pbvF+nf SSsrsUa61UO3tUodIcZzO05F7dSym1I4C234GXcTsyXBMJH+oTXTsCknOSSEC9pe emm/EGb+MqXsN4IrP1d5irl2uI8kNx2/9Fst9MCOiJtXxzok68r7V6tMvWKuYeCB 0nwan3ooOAYxBwKCAQEAxnhQm3u+YAEWloGWgnDhK6sBDIZCvpIX0pxr965CLSnh 8nyqSoz8OrrWPv/cGzFt+JCp7rjBCB/njO6L6s4rLDf5H63OMkcs4tpsr/To8B94 nFEij7CeynD8IdtUae9WLzPk8Q3oJgrVNcB2HTdC+Hjt4INeGV3biMMsNt4XINDK dYhId1rFnJddeQtTrrnuWQ88Z9lXFyZPiO4vhbQ0SeVWNiBOewWwvkwiZj1AmRRO 7Xa343elmyeJAAuillP7NrZfqmF911oqUhGSfEECIhqsnzTlabgXtysNNusoyPI+ WoaGqE1/xCxlNoflq0iyN8onKtj4iKw3ZTZVwLb6/wKCAQEAzR1g/JMRc8MG3llG 6QLuSyz/IvUyZHz6Gww21n0K7542UZBeb1gutWVoWXkRqM3vMhkPtdhU02cTH+eP Q0Jg963qzul6MRvnS+YIJQGBecycPimrMjYHUeHBk5sW3ATfReHltOpXEsEk6Ah3 Gc+5m6KkEQqCC1WeCm+PqAqAXOAyZJd/EPp4Vv8ClIv8EW6rI2vEDQjvvNYWeVvs XjXYMsCiL8YM2Q3ducXAoI2mKkIH8Ch7Svk4cPM9EkrDBq+lE1zJ08Fdadj24Gf0 nsOVxQrqDuP5TTBerpLKTdIVXqRjsX8qpxXv23e9oonj7zYG1zvNMrBpii1Pk+vR cyYPZQKCAQEApuMcxOF0372KhNxK9zx72wBcTW/IR/8I0Sx/DTIWq2uAdyqk9zM+ FRRue2MibitOUakze20XxAEv763XMYZTf0dB0IWR0W1QLSGGKx9BkEimXqtK6JCX tZr0KHQJs1pxmheE9729699IEX7Y0xBY3B6zyAou4h2uMH4Ne8WcpRdsZxBF/zbw 3A/bpaEEqPPnnDPXk2uKdAje8EF47HDvVwPlTnY0B/Zs/FeAxX/UBeSxybP+ROOi +ahw5vzhpo7Put3364k3DBLha0kjaCAx7wOHDAiqsA8AwiENZ5SuIuqvy+c66+Lf ANJj+UqksTbbxVXTQZBYzHQj0JOz3+z9eQKCAQAzdrQ0C1wa8mIgl/6m4CTR5wDD qtkXCiQbohIZQlGDofmz0tt9PIb8D56NKOWyMNK3+ubrsbumxl8MWZv8H4Lwdua7 qchvgFxGl9eQw55MG0EYSlINMVAQCO+sejyyzOacDc+LVSUwM55CKI9pEzXJFjvk drs9b0aL+O9FTU5nqTyCLttUVJ9CaXxVMBV7kHUHuYgM3UtNdx4eWTd+zPEA9FfD u7T87+C8eCbp1wjM3hB/q7IR86GIO4w8aYzZnOw8zQ4z37dWWDiFFmbJ+zNjD4J2 w6xdIfZ6/qCHuurUprBYvLQzpdE2J0FK4rjSYRsq3G7aFqgyRHlyaEVdA+bi -----END RSA PRIVATE KEY-----`) var caData = []byte(`-----BEGIN CERTIFICATE----- MIIFYzCCA0ugAwIBAgIJAMnXOfSPRBhjMA0GCSqGSIb3DQEBCwUAMEgxCzAJBgNV BAYTAkNOMREwDwYDVQQIDAhTaGFuZ2hhaTESMBAGA1UECgwJV2hvQXJlWW91MRIw EAYDVQQDDAlsei1kb2NrZXIwHhcNMTkxMjA0MDMyNzMzWhcNMjAxMjAzMDMyNzMz WjBIMQswCQYDVQQGEwJDTjERMA8GA1UECAwIU2hhbmdoYWkxEjAQBgNVBAoMCVdo b0FyZVlvdTESMBAGA1UEAwwJbHotZG9ja2VyMIICIjANBgkqhkiG9w0BAQEFAAOC Ag8AMIICCgKCAgEAr9rGOUBh8mCqGCvBg2q6mhSMIsXi12h4aHZHsrFrzCnnF9Wg nqX6tw9cThu5v3dWN9l4xgGQOkb17UnIKkuWMgSo/pa2OTGwBe9R3VqOVzCgft8o qOkgV/aFswSIpweJh6ftcLvq7PJNpkevbZm3aWFzU3306nx+RKMSfHmV/beoIST9 /b8xnWoLePdsmrYG3QSMTvFCP0pJSHleCl0JuncXD4PIEiyY+sikbfP0kdIu4IDy Cz54/AvherKOnhrzw2fN49SAmMSStFdIRQl4IKtaiywzKct9xFGCsOvDizu5trD3 CLRUb4HDoQw56nQlTwOzS7o1DQ33heyenZ1D6mzriz3r2mV4IMRqZQ8xDEVCTZkk 5ihYBkaKPKiJwuxTwxQ/AF//s2pur2Hq5UEdk7irBTelvmmFnvVazWCWiRh4SHHY hMLZG3MR8uPOQv0FAAaLecN97F78X9uTbfyxpTVTBDCgAMWUdFHXpdo0rVKSxm1N 2IGecB2bCcYPKo46gAj7UHAJic+OWjNXtFs4fqE4CMCIGijOyUbxaiQfliZPn41r OB8R5EXG2xAhShAVnEVgKoPSFtXFeDjLlNGBob2QNS3epqEC3YsktHmmX+UWyZNr gVfC+ptiLRwwsREThmlgmvxrG2Zwbp2gp2Sjx4rogQYVIzSSItY8Oa5wymUCAwEA AaNQME4wHQYDVR0OBBYEFEQJ9ivTuxyIPO5o5leSuD0bWtw0MB8GA1UdIwQYMBaA FEQJ9ivTuxyIPO5o5leSuD0bWtw0MAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEL BQADggIBAHMoMwh2EUoX0vQBWVBTtWBWBO/gz2Ht+Q6j1qjQA7qGo5fu9msmMvgm XmHq/mdhAtYUCK38y9H/Z5Xg3eoKA/fW2VhehB4v/D1npira4NW7BEK3Lfr8Tu2j ZSEpI82dk673gYRv2kJa9qoIO31TFMQ8qpySkOrJz/IxXd4vwFQx42jAusyGdHzb 6XseqDKhMIt09mx+PjcDSijAIi9AauLqsTbrK3Xbgbb68jdfqjbkRedc1/RuLeLj K4NpzDTZ/fq/NBt/S8IjqY/99vjUbEadkN2XlZGjIP894uVJmsRTea5Xtfbim+vY 8wBYvTwPUxcZSXgOlU9UgH6JClJ3t/htxQt7p5GBG7tu153JeboNuJ3oPwWnwHkw puWv5P0zAAHoOksEL3EB1NlEVW0QcPg1ba9YA1tktFutlVO9vwDKlW3pLr0TJSy3 tlV8pSK8ksAlPoI30TWCRFFNfOZqvTorR390xDooKREC2Wr0YFgrI5opclUgBCOq zX3io6J9JXTCRFFyrCXlRYECQW3yr2ez67qfmjkFQnz0Jf8ow4mU94w2rZNpGdNY KJlAZLDfuEis5OHPV0MTc96QhviF0YFURxRQ6mnPlGwcqIOo8KuMe5YfQNkLuHQ+ oEwmxRfh4AwuNnSueoSjummSmCVC8ICizkDzNBL74r4gfOeKdSwg -----END CERTIFICATE-----`) var _tlsConfig *tls.Config func getTLSConfig() (*tls.Config, error) { if _tlsConfig != nil { return _tlsConfig, nil } // load cert // cert, err := tls.LoadX509KeyPair(wechatCertPath, wechatKeyPath) cert, err := tls.X509KeyPair(certPem, keyPem) if err != nil { return nil, err } // load root ca //caData, err := ioutil.ReadFile(wechatCAPath) //if err != nil { // fmt.Println(err) // return nil, err //} pool := x509.NewCertPool() pool.AppendCertsFromPEM(caData) _tlsConfig = &tls.Config{ Certificates: []tls.Certificate{cert}, RootCAs: pool, } return _tlsConfig, nil } func main() { tlsConfig, err := getTLSConfig() if err != nil { fmt.Println(err) } tr := &http.Transport{TLSClientConfig: tlsConfig} httpclient := &http.Client{Transport: tr} //改成自己的ip 加端口 cli, err := client.NewClient(\"https://10.255.128.147:2376\", \"1.13.1\", httpclient, nil) if err != nil { fmt.Println(err) } containers, err := cli.ContainerList(context.Background(), types.ContainerListOptions{}) if err != nil { panic(err) } for _, container := range containers { fmt.Println(container.ID) } } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"docker/build-image.html":{"url":"docker/build-image.html","title":"build image use args","keywords":"","body":"package main import ( \"context\" \"fmt\" \"github.com/docker/docker/api/types\" \"github.com/docker/docker/client\" \"github.com/jhoonb/archivex\" \"io/ioutil\" \"log\" \"os\" \"path\" \"path/filepath\" \"strings\" ) func getDockerfile(path string) (string, string) { var dockerfilePath string var baoPath string err := filepath.Walk(path, func(path string, info os.FileInfo, err error) error { if err != nil { return err } name := info.Name() if strings.HasSuffix(name, \"war\") { dockerfilePath = path } if strings.HasSuffix(name, \"Dockerfile\") { baoPath = path } return nil }) if err != nil { log.Println(err) } return dockerfilePath, baoPath } func main() { cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation()) if err != nil { panic(err) } // 搜索打包的路径 获取dockerfile 绝对路径并打成tar 传递给docker引擎 appPath, dockerfilePath := getDockerfile(\"/opt/bozz\") fmt.Println(path.Base(appPath)) appName := path.Base(appPath) fmt.Println(path.Dir(dockerfilePath)) os.MkdirAll(\"/opt/bozz/\", 0755) tar := new(archivex.TarFile) tar.Create(\"/opt/bozz/conf.tar\") tar.AddAll(path.Dir(dockerfilePath), false) tar.Close() dockerBuildContext, err := os.Open(\"/opt/bozz/conf.tar\") defer dockerBuildContext.Close() //buildArgs := make(map[string]*string) var arg2 string = \"target/\" + appName var arg3 string = appName args := map[string]*string{ \"source_war\": &arg2, \"target_war\": &arg3, } options := types.ImageBuildOptions{ //Dockerfile: \"./Dockerfile\", Tags: []string{\"test\"}, Dockerfile: \"Dockerfile\", NoCache: true, SuppressOutput: false, Remove: true, ForceRemove: true, PullParent: true, BuildArgs: args} buildResponse, err := cli.ImageBuild(context.Background(), dockerBuildContext, options) if err != nil { fmt.Printf(\"%s\", err.Error()) } //fmt.Printf(\"********* %s **********\", buildResponse.OSType) response, err := ioutil.ReadAll(buildResponse.Body) if err != nil { fmt.Printf(\"%s\", err.Error()) } fmt.Println(string(response)) } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"docker/container-create.html":{"url":"docker/container-create.html","title":"container create","keywords":"","body":"package main import ( //\"context\" \"fmt\" \"github.com/docker/docker/api/types\" \"github.com/docker/docker/client\" // \"github.com/docker/docker/api/types/container\" \"github.com/docker/docker/api/types/mount\" \"github.com/docker/go-connections/nat\" \"golang.org/x/net/context\" ) func main() { cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation()) if err != nil { panic(err) } //create container ctx := context.Background() nport, err := nat.NewPort(\"tcp\", \"9001\") if err != nil { fmt.Println(err) } resp, err := cli.ContainerCreate(ctx, &container.Config{ Image: \"172.16.100.216/yygl/lz-eoms-appserver:v1.1.0\", Tty: false, ExposedPorts: nat.PortSet{ //docker容器对外开放的端口 nport: struct{}{}, }, }, &container.HostConfig{ PortBindings: nat.PortMap{ nport: []nat.PortBinding{nat.PortBinding{ //docker容器映射到宿主机的端口 HostIP: \"0.0.0.0\", HostPort: \"9001\", }}, }, Mounts: []mount.Mount{ { Type: mount.TypeBind, Source: \"/opt/config/appserver/application.properties\", Target: \"/opt/conf/application-env.properties\", }, }, }, nil, \"appserver\") if err != nil { panic(err) } if err := cli.ContainerStart(ctx, resp.ID, types.ContainerStartOptions{}); err != nil { panic(err) } } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"docker/pull-image.html":{"url":"docker/pull-image.html","title":"pull image","keywords":"","body":"package main import ( \"encoding/base64\" \"encoding/json\" \"fmt\" \"github.com/docker/docker/api/types\" \"github.com/docker/docker/client\" \"golang.org/x/net/context\" \"io\" \"os\" //tls \"crypto/tls\" \"crypto/x509\" \"net/http\" ) func yyglgetTLSConfig() (*tls.Config, error) { var _tlsConfig *tls.Config if _tlsConfig != nil { return _tlsConfig, nil } cert, err := tls.X509KeyPair(yyglcertPem, yyglkeyPem) if err != nil { return nil, err } pool := x509.NewCertPool() pool.AppendCertsFromPEM(yyglcaData) _tlsConfig = &tls.Config{ Certificates: []tls.Certificate{cert}, RootCAs: pool, } return _tlsConfig, nil } func main() { ctx := context.Background() tlsConfig, err := yyglgetTLSConfig() if err != nil { fmt.Println(err) } tr := &http.Transport{TLSClientConfig: tlsConfig} httpclient := &http.Client{Transport: tr} //改成自己的ip 加端口 cli, err := client.NewClient(\"https://172.16.99.73:2376\", \"1.13.1\", httpclient, nil) if err != nil { fmt.Println(err) } // pull authConfig := types.AuthConfig{ Username: \"yygl\", Password: \"Yygl@123\", } encodedJSON, err := json.Marshal(authConfig) if err != nil { panic(err) } authStr := base64.URLEncoding.EncodeToString(encodedJSON) //reader, err := cli.ImagePull(ctx, iname, types.ImagePullOptions{RegistryAuth: authStr}) reader, err := cli.ImagePull(ctx, \"172.16.100.216/yygl/lz-eoms-appserver:v1.1.0\", types.ImagePullOptions{RegistryAuth: authStr}) if err != nil { panic(err) } io.Copy(os.Stdout, reader) } var yyglcertPem = []byte(`-----BEGIN CERTIFICATE----- MIID5zCCAs+gAwIBAgIJAL4gbGex+AAXMA0GCSqGSIb3DQEBCwUAMBkxFzAVBgNV BAMMDjE5Mi4xNjguMTAuMjUwMB4XDTIwMDYwMzE0NTQ0MFoXDTIxMDYwMzE0NTQ0 MFowETEPMA0GA1UEAwwGY2xpZW50MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC CgKCAgEA2lWlYuSLv8KtIEe1PYw8Yu474m65JhEVF5019on1X7l0AsOOQtdpsa4j UxzXIs4rl+RAGlhP2i8+rM/oMGAsgiglxyRbpZb2ehJzp//LJ5MBHyJx4kWbuUnr nolXZiPMnMK1f62Inr+f7+JvFw4Tgk6+QuAYmCVKDrPvIT6+SEmI7VrDry91WX3W RvCbUoD/TNe+LaTzLU/WVKgNKe/GDAtflqBcKspUecCBs++Fxs1N3USIzOFgHOk9 Wai8J7epDA2+f0f8fqxUmTk+Z/tbCDiPcSqpJCTyDrlmOTURCP43lxqg01qAJtqs 98uej+y7RTTe1qunr8fJ6QCccVpfzEzFgfuYACrTeqWBDcFNZO+bppQjHoN0WAPp fgMVGyk5v72Jp9d85uGNsY5nz54U3H3WLuPVjsaDzvCQDAkDsSvIpVqHV2XL95Id 5PNooXsLjFWzK8Xtnh9Ba/B8P5QKr4i+sZfzhZGCDy2bvl3ufK/OQR4LFPjq8jNs 3ftCHHBhknKf5uN7o82MaO8SQeoRkIuuom6tenZdQNAsd+gMFx+okc01ZR9ta6Um Pgz+y4+81Yo9EoN8AnfGY2S727DHlfNQ9A+kBoajNM+yHOuR/lQH7NyRQsqOvXxP KAoM4DsLOSxBtmVCMF+TbZiZznxDaOla18mL2F7F3x1bkKB5g9UCAwEAAaM6MDgw IQYDVR0RBBowGIcErBBjCocEfwAAAYcErBBjSYcErBBjSjATBgNVHSUEDDAKBggr BgEFBQcDAjANBgkqhkiG9w0BAQsFAAOCAQEAluKDXfHwVBOIajRd1ClmBfSNDeog +65j0GVLPnEXh9tdYJ9BDGNH3tOO1+W5ehb31XjbQGDGsUz9NcPDBtisF/16zWzG 09P+bdcq56udEr8QOY2RXYQJodr6AC8t4RmftWAFCfE7QqYJz2H0Ame7yvw22LIU kFp7c4Q6i3AVSCN0gC/CUyW5cwjvuMfed5ZdNIIgRJ/O8z/w8baBa/HhSUEas94N JEeAfl71VO+UhbhbxU3TFhMfYwiZv2+FKnYQI/TIojrgYgVzAET+vQfyaFoYsloi 2oSMc+EV7cxX2TfMG7W3S1QYxNrmeWodPYBYX1GVgFI/0UqqFjQR8p3EOg== -----END CERTIFICATE-----`) var yyglkeyPem = []byte(`-----BEGIN RSA PRIVATE KEY----- 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 -----END RSA PRIVATE KEY-----`) var yyglcaData = []byte(`-----BEGIN CERTIFICATE----- MIIDBTCCAe2gAwIBAgIJAPs7Pe27NKzUMA0GCSqGSIb3DQEBCwUAMBkxFzAVBgNV BAMMDjE5Mi4xNjguMTAuMjUwMB4XDTIwMDYwMzE0NTMwNloXDTQ3MTAyMDE0NTMw NlowGTEXMBUGA1UEAwwOMTkyLjE2OC4xMC4yNTAwggEiMA0GCSqGSIb3DQEBAQUA A4IBDwAwggEKAoIBAQDocld1e168wxhUlcXCHmpctqgMjhymkSW5rUMcAG6fGvYj 3U7ohwfV+/kaKoCsGg1nyUcpa26pIMEXvRgx7aBEo28x27uqV5r3pipAmfNbuJvb ZktrmKyxo1Z6r1euZ3JFB9vnuGOVYXbtJhpMbpi+7H8ZIDcjgmcR1ijF1l5zDjdP OJDbed0L48OARsJuky6zXKtJCLRVGop5TNtswcmze1xbiy01z1eIirtIZaoZBg8G /c0KEEhMw1pjzLVKyiuzlhCYxE4Qs3kI0GlnUW3Qe+QTjqLYCskAzVS94RFnbwkV lyHq+/9LCmnatUynIGpnlMysCJ+kHkMXlqWH1dZXAgMBAAGjUDBOMB0GA1UdDgQW BBRpPnLo3/QzOa1dTqZnmiJMWATCHzAfBgNVHSMEGDAWgBRpPnLo3/QzOa1dTqZn miJMWATCHzAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQDW69UDptu6 KD5YbPpjhdwl6eUodwWEFoWS1/UiYwu0tlhClUsiozyqzd01lTWW0rLftTp3K5Tk MqpIJrcrK/hZlbqdXGPyKywJvpuEzmnyUaU1diOA8Muac6Hn6GdNyOvuS2roisv3 lQyKmKldDvhSqCoDvRwss9BMjGFqUK3H4e5De0NNoBLt8Ww+LFoFUz0C4Xwp4n91 yuecXXdelK101JccY5YVG8RgxT/jbE349XaC89G448JSTwbqBHIDWxgbKlkdHAA4 5eC7eE2slj4WDbDGScldjycET6j+ILF6yFlwnDl3padTvQs/eYlKX1H2W7PBs9VK IlwPO9WsPlC8 -----END CERTIFICATE-----`) console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"docker/mount.html":{"url":"docker/mount.html","title":"mount args","keywords":"","body":"package main import ( //\"context\" \"fmt\" \"github.com/docker/docker/api/types\" \"github.com/docker/docker/client\" // \"github.com/docker/docker/api/types/container\" \"github.com/docker/docker/api/types/mount\" \"github.com/docker/go-connections/nat\" \"golang.org/x/net/context\" ) func main() { cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation()) if err != nil { panic(err) } //create container ctx := context.Background() nport, err := nat.NewPort(\"tcp\", \"9001\") if err != nil { fmt.Println(err) } resp, err := cli.ContainerCreate(ctx, &container.Config{ Image: \"172.16.100.216/yygl/lz-eoms-appserver:v1.1.0\", Tty: false, ExposedPorts: nat.PortSet{ //docker容器对外开放的端口 nport: struct{}{}, }, }, &container.HostConfig{ PortBindings: nat.PortMap{ nport: []nat.PortBinding{nat.PortBinding{ //docker容器映射到宿主机的端口 HostIP: \"0.0.0.0\", HostPort: \"9001\", }}, }, Mounts: getMount(), }, nil, \"appserver\") if err != nil { panic(err) } if err := cli.ContainerStart(ctx, resp.ID, types.ContainerStartOptions{}); err != nil { panic(err) } } func getMount() []mount.Mount { a := []mount.Mount{} mountArgs := make(map[string]string) mountArgs[\"/opt/config/appserver/application.properties\"] = \"/opt/conf/application-env.properties\" mountArgs[\"/opt/config/appserver/b\"] = \"/opt/conf/b\" for k, v := range mountArgs { var m mount.Mount m.Type = mount.TypeBind m.Source = k m.Target = v a = append(a, m) } return a } // echo \"hello\" > /opt/config/appserver/b console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"k8s/k8s.html":{"url":"k8s/k8s.html","title":"k8s sdk","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"k8s/go-mod.html":{"url":"k8s/go-mod.html","title":"go mod","keywords":"","body":"module github.com/yimtun/CloudLink go 1.14 require ( github.com/Microsoft/go-winio v0.4.14 // indirect github.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e github.com/containerd/containerd v1.3.4 // indirect github.com/docker/distribution v2.7.1+incompatible // indirect github.com/docker/docker v17.12.0-ce-rc1.0.20200508181053-298ba5b13150+incompatible github.com/docker/go-connections v0.4.0 // indirect github.com/docker/go-units v0.4.0 // indirect github.com/howeyc/gopass v0.0.0-20190910152052-7cb4b85ec19c github.com/imdario/mergo v0.3.9 // indirect github.com/jhoonb/archivex v0.0.0-20180718040744-0488e4ce1681 github.com/opencontainers/go-digest v1.0.0 // indirect github.com/opencontainers/image-spec v1.0.1 // indirect github.com/pkg/errors v0.9.1 // indirect github.com/spf13/cobra v1.0.0 github.com/urfave/cli v1.22.4 // indirect golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2 golang.org/x/net v0.0.0-20190522155817-f3200d17e092 gopkg.in/inf.v0 v0.9.1 // indirect // k8s.io/api v0.0.0-20191004102349-159aefb8556b k8s.io/apimachinery v0.0.0-20191004074956-c5d2f014d689 k8s.io/client-go v11.0.1-0.20191029005444-8e4128053008+incompatible k8s.io/klog v1.0.0 // indirect k8s.io/kube-openapi v0.0.0-20191107075043-30be4d16710a // indirect k8s.io/utils v0.0.0-20200109141947-94aeca20bf09 // indirect ) replace ( k8s.io/api => k8s.io/api v0.0.0-20191004102349-159aefb8556b k8s.io/apimachinery => k8s.io/apimachinery v0.0.0-20191004074956-c5d2f014d689 k8s.io/client-go => k8s.io/client-go v11.0.1-0.20191029005444-8e4128053008+incompatible ) console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"k8s/client_kubeconfig_hard_code.html":{"url":"k8s/client_kubeconfig_hard_code.html","title":"kubeconfig 硬编码 yaml 格式注意 set paste","keywords":"","body":"package main import ( //\"context\" \"fmt\" \"os\" \"time\" \"k8s.io/apimachinery/pkg/api/errors\" metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\" \"k8s.io/client-go/kubernetes\" \"k8s.io/client-go/tools/clientcmd\" // // Uncomment to load all auth plugins // _ \"k8s.io/client-go/plugin/pkg/client/auth\" // // Or uncomment to load specific auth plugins // _ \"k8s.io/client-go/plugin/pkg/client/auth/azure\" // _ \"k8s.io/client-go/plugin/pkg/client/auth/gcp\" // _ \"k8s.io/client-go/plugin/pkg/client/auth/oidc\" // _ \"k8s.io/client-go/plugin/pkg/client/auth/openstack\" ) func main() { var str = []byte(` apiVersion: v1 clusters: - cluster: server: http://10.255.128.107:8080 name: kubernetes107 contexts: - context: cluster: kubernetes107 user: \"\" name: default current-context: default kind: Config preferences: {} users: []`) cc, _ := clientcmd.NewClientConfigFromBytes(str) config, err := cc.ClientConfig() // use the current context in kubeconfig //config, err := clientcmd.BuildConfigFromFlags(\"\", *kubeconfig) if err != nil { panic(err.Error()) } // create the clientset clientset, err := kubernetes.NewForConfig(config) if err != nil { panic(err.Error()) } for { pods, err := clientset.CoreV1().Pods(\"\").List(metav1.ListOptions{}) if err != nil { panic(err.Error()) } fmt.Printf(\"There are %d pods in the cluster\\n\", len(pods.Items)) // Examples for error handling: // - Use helper functions like e.g. errors.IsNotFound() // - And/or cast to StatusError and use its properties like e.g. ErrStatus.Message namespace := \"default\" pod := \"example-xxxxx\" _, err = clientset.CoreV1().Pods(namespace).Get(pod, metav1.GetOptions{}) if errors.IsNotFound(err) { fmt.Printf(\"Pod %s in namespace %s not found\\n\", pod, namespace) } else if statusError, isStatus := err.(*errors.StatusError); isStatus { fmt.Printf(\"Error getting pod %s in namespace %s: %v\\n\", pod, namespace, statusError.ErrStatus.Message) } else if err != nil { panic(err.Error()) } else { fmt.Printf(\"Found pod %s in namespace %s\\n\", pod, namespace) } time.Sleep(10 * time.Second) } } func homeDir() string { if h := os.Getenv(\"HOME\"); h != \"\" { return h } return os.Getenv(\"USERPROFILE\") // windows } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"ssh-client/ssh-client.html":{"url":"ssh-client/ssh-client.html","title":"ssh  client","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"ssh-client/ssh-client-stdout.html":{"url":"ssh-client/ssh-client-stdout.html","title":"输出到标准输出","keywords":"","body":"package main import ( \"golang.org/x/crypto/ssh\" \"log\" \"os\" ) var username = \"root\" var password = \"123456\" var host = \"192.168.20.133:22\" var commandToExecute = \"hostname\" //var commandToExecute = \"find /opt/bozz/ -name pom.xml | grep parent\" func main() { config := &ssh.ClientConfig{ User: username, Auth: []ssh.AuthMethod{ ssh.Password(password), }, HostKeyCallback: ssh.InsecureIgnoreHostKey(), } client, err := ssh.Dial(\"tcp\", host, config) if err != nil { log.Fatal(\"Error dialing server. \", err) } // Multiple sessions per client are allowed session, err := client.NewSession() if err != nil { log.Fatal(\"Failed to create session: \", err) } defer session.Close() // Pipe the session output directly to standard output // Thanks to the convenience of writer interface session.Stdout = os.Stdout session.Run(commandToExecute) if err != nil { log.Fatal(\"Error executing command. \", err) } } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"ssh-client/ssh-client-stdout-str.html":{"url":"ssh-client/ssh-client-stdout-str.html","title":"输出到字符串","keywords":"","body":"package main import ( \"golang.org/x/crypto/ssh\" \"log\" // \"bytes\" \"fmt\" \"strings\" ) var username = \"root\" var password = \"123456\" var host = \"172.16.99.10:22\" //var commandToExecute = \"hostname\" var commandToExecute = \"find /opt/bozz/ -name pom.xml | grep parent\" func main() { config := &ssh.ClientConfig{ User: username, Auth: []ssh.AuthMethod{ ssh.Password(password), }, HostKeyCallback: ssh.InsecureIgnoreHostKey(), } client, err := ssh.Dial(\"tcp\", host, config) if err != nil { log.Fatal(\"Error dialing server. \", err) } // Multiple sessions per client are allowed session, err := client.NewSession() if err != nil { log.Fatal(\"Failed to create session: \", err) } defer session.Close() // var stdOut, stdErr bytes.Buffer session.Stdout = &stdOut session.Stderr = &stdErr session.Run(commandToExecute) //fmt.Println(stdOut.String()) //fmt.Println(strings.TrimSpace(\" \\t\\n a lone gopher \\n\\t\\r\\n\")) if stdOut.String() == \"\" { fmt.Println(\"无法获取pom\") return } else { fmt.Println(strings.TrimSpace(stdOut.String())) } } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"https/https.html":{"url":"https/https.html","title":"https 和证书","keywords":"","body":" https://www.cnblogs.com/pzblog/p/9088286.html console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"https/https-server-simple.html":{"url":"https/https-server-simple.html","title":"一个简单的https 服务器","keywords":"","body":"创建私钥 openssl genrsa -out server.key 2048 创建证书 openssl req -x509 -new -nodes -key server.key -subj \"/CN=yandun.com\" -days 10000 -out server.crt package main import ( \"fmt\" \"net/http\" ) func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"Hi, This is an example of https service in golang!\") } func main() { http.HandleFunc(\"/\", handler) http.ListenAndServeTLS(\":8081\", \"server.crt\", \"server.key\", nil) } curl https://192.168.20.133:8081 服务的日志 2020/05/29 20:09:09 http: TLS handshake error from 192.168.20.133:36738: remote error: tls: unknown certificate authority console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"https/https-clinet-simple.html":{"url":"https/https-clinet-simple.html","title":"https 客户端","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"https/https-clinet-simple-no-ver.html":{"url":"https/https-clinet-simple-no-ver.html","title":"https 客户端 忽略验证服务端","keywords":"","body":"package main import ( \"fmt\" \"io/ioutil\" \"net/http\" ) func main() { resp, err := http.Get(\"https://localhost:8081\") if err != nil { fmt.Println(\"error:\", err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) } go run https_client.go error: Get \"https://localhost:8081\": x509: certificate is valid for yandun.com, not localhos package main import ( \"crypto/tls\" \"fmt\" \"io/ioutil\" \"net/http\" ) func main() { tr := &http.Transport{ TLSClientConfig: &tls.Config{InsecureSkipVerify: true}, } client := &http.Client{Transport: tr} resp, err := client.Get(\"https://localhost:8081\") if err != nil { fmt.Println(\"error:\", err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) } go run https_client_no_verify.go Hi, This is an example of https service in golang! console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"https/https-clinet-simple-ver.html":{"url":"https/https-clinet-simple-ver.html","title":"使用服务端的证书验证服务端","keywords":"","body":"grep yandun /etc/hosts 192.168.20.133 yandun.com curl https://yandun.com:8081 --cacert /opt/CloudLink/https-server/server.crt Hi, This is an example of https service in golang! package main import ( \"crypto/tls\" \"crypto/x509\" \"fmt\" \"io/ioutil\" \"net/http\" ) func main() { pool := x509.NewCertPool() caCertPath := \"server.crt\" caCrt, err := ioutil.ReadFile(caCertPath) if err != nil { fmt.Println(\"ReadFile err:\", err) return } pool.AppendCertsFromPEM(caCrt) tr := &http.Transport{ TLSClientConfig: &tls.Config{RootCAs: pool}, } client := &http.Client{Transport: tr} resp, err := client.Get(\"https://yandun.com:8081\") if err != nil { fmt.Println(\"Get error:\", err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"https/https-server-ca.html":{"url":"https/https-server-ca.html","title":"服务端使用ca签发证书","keywords":"","body":"openssl genrsa -out ca.key 2048 openssl req -x509 -new -nodes -key ca.key -subj \"/CN=tonybai.com\" -days 5000 -out ca.crt openssl genrsa -out server.key 2048 openssl req -new -key server.key -subj \"/CN=localhost\" -out server.csr openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 5000 server package main import ( \"fmt\" \"net/http\" ) func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"Hi, This is an example of http service in golang!\") } func main() { http.HandleFunc(\"/\", handler) http.ListenAndServeTLS(\":8081\", \"server.crt\", \"server.key\", nil) } client package main import ( \"crypto/tls\" \"crypto/x509\" \"fmt\" \"io/ioutil\" \"net/http\" ) func main() { pool := x509.NewCertPool() caCertPath := \"ca.crt\" caCrt, err := ioutil.ReadFile(caCertPath) if err != nil { fmt.Println(\"ReadFile err:\", err) return } pool.AppendCertsFromPEM(caCrt) tr := &http.Transport{ TLSClientConfig: &tls.Config{RootCAs: pool}, } client := &http.Client{Transport: tr} resp, err := client.Get(\"https://localhost:8081\") if err != nil { fmt.Println(\"Get error:\", err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"https/https-server-ca_ver_client.html":{"url":"https/https-server-ca_ver_client.html","title":"服务端验证客户端证书","keywords":"","body":"server package main import ( \"crypto/tls\" \"crypto/x509\" \"fmt\" \"io/ioutil\" \"net/http\" ) type myhandler struct { } func (h *myhandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"Hi, This is an example of http service in golang!\\n\") } func main() { pool := x509.NewCertPool() caCertPath := \"ca.crt\" caCrt, err := ioutil.ReadFile(caCertPath) if err != nil { fmt.Println(\"ReadFile err:\", err) return } pool.AppendCertsFromPEM(caCrt) s := &http.Server{ Addr: \":8081\", Handler: &myhandler{}, TLSConfig: &tls.Config{ ClientCAs: pool, ClientAuth: tls.RequireAndVerifyClientCert, }, } err = s.ListenAndServeTLS(\"server.crt\", \"server.key\") if err != nil { fmt.Println(\"ListenAndServeTLS err:\", err) } } 创建客户端私钥 证书请求文件 由 ca 签发 openssl genrsa -out client.key 2048 openssl req -new -key client.key -subj \"/CN=tonybai_cn\" -out client.csr cat > client.ext openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extfile client.ext -out client.crt -days 5000 client package main import ( \"crypto/tls\" \"crypto/x509\" \"fmt\" \"io/ioutil\" \"net/http\" ) func main() { pool := x509.NewCertPool() caCertPath := \"ca.crt\" caCrt, err := ioutil.ReadFile(caCertPath) if err != nil { fmt.Println(\"ReadFile err:\", err) return } pool.AppendCertsFromPEM(caCrt) cliCrt, err := tls.LoadX509KeyPair(\"client.crt\", \"client.key\") if err != nil { fmt.Println(\"Loadx509keypair err:\", err) return } tr := &http.Transport{ TLSClientConfig: &tls.Config{ RootCAs: pool, Certificates: []tls.Certificate{cliCrt}, }, } client := &http.Client{Transport: tr} resp, err := client.Get(\"https://localhost:8081\") if err != nil { fmt.Println(\"Get error:\", err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) } go run https_client_server_verifi.go Hi, This is an example of http service in golang! curl https://localhost:8081 --cert /opt/CloudLink/https-client/client.crt --key /opt/CloudLink/https-client/client.key --cacert /opt/CloudLink/https-client/ca.crt Hi, This is an example of http service in golang! curl https://127.0.0.1:8081 --cert /opt/CloudLink/https-client/client.crt --key /opt/CloudLink/https-client/client.key --cacert /opt/CloudLink/https-client/ca.crt curl: (51) Unable to communicate securely with peer: requested domain name does not match the server's certificate. curl https://192.168.20.133:8081 --cert /opt/CloudLink/https-client/client.crt --key /opt/CloudLink/https-client/client.key --cacert /opt/CloudLink/https-client/ca.crt curl: (51) Unable to communicate securely with peer: requested domain name does not match the server's certificate. 重新生成服务端证书 以便使用ip 访问 生成服务端私钥和csr openssl genrsa -out server.key 2048 openssl req -new -key server.key -subj \"/CN=localhost\" -out server.csr echo subjectAltName = IP:192.168.20.133,IP:127.0.0.1 > extfile.cnf openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 5000 -extfile extfile.cnf curl https://192.168.20.133:8081 --cert /opt/CloudLink/https-client/client.crt --key /opt/CloudLink/https-client/client.key --cacert /opt/CloudLink/https-client/ca.crt Hi, This is an example of http service in golang! 客户端修改 package main import ( \"crypto/tls\" \"crypto/x509\" \"fmt\" \"io/ioutil\" \"net/http\" ) func main() { pool := x509.NewCertPool() caCertPath := \"ca.crt\" caCrt, err := ioutil.ReadFile(caCertPath) if err != nil { fmt.Println(\"ReadFile err:\", err) return } pool.AppendCertsFromPEM(caCrt) cliCrt, err := tls.LoadX509KeyPair(\"client.crt\", \"client.key\") if err != nil { fmt.Println(\"Loadx509keypair err:\", err) return } tr := &http.Transport{ TLSClientConfig: &tls.Config{ RootCAs: pool, Certificates: []tls.Certificate{cliCrt}, }, } client := &http.Client{Transport: tr} resp, err := client.Get(\"https://192.168.20.133:8081\") if err != nil { fmt.Println(\"Get error:\", err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"https/https-client-hard-code-tls.html":{"url":"https/https-client-hard-code-tls.html","title":"客户端证书hard code","keywords":"","body":"package main import ( \"crypto/tls\" \"crypto/x509\" \"fmt\" \"io/ioutil\" \"net/http\" ) func main() { pool := x509.NewCertPool() pool.AppendCertsFromPEM(caData) //cliCrt, err := tls.LoadX509KeyPair(\"client.crt\", \"client.key\") cliCrt, err := tls.X509KeyPair(certPem, keyPem) if err != nil { fmt.Println(\"Loadx509keypair err:\", err) return } tr := &http.Transport{ TLSClientConfig: &tls.Config{ RootCAs: pool, Certificates: []tls.Certificate{cliCrt}, }, } client := &http.Client{Transport: tr} resp, err := client.Get(\"https://192.168.20.133:8081\") if err != nil { fmt.Println(\"Get error:\", err) return } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) fmt.Println(string(body)) } var caData = []byte(`-----BEGIN CERTIFICATE----- MIIC/zCCAeegAwIBAgIJAKL+fvYeq6a9MA0GCSqGSIb3DQEBCwUAMBYxFDASBgNV BAMMC3RvbnliYWkuY29tMB4XDTIwMDUyOTEzMDMyNFoXDTM0MDIwNTEzMDMyNFow FjEUMBIGA1UEAwwLdG9ueWJhaS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw ggEKAoIBAQCuIgtaFsE9hlc8/aqnRQ2c3xH9SphTKno+dSgoN0GbXakvVRCToRbc E15HtqlbtXqgnwpffC5OqePpG8S0wH6TufvA0k5MQ4W7/YLwJfoQgKkafzsYSz6U 5deTn0+CxTeVvEUfi1TaGDWjf2gNhlxu35ESPC6kjErb1wdAHiJVDWWpSIRFAoYD mmjFXchjnsqHHzRG5J1/7XP9xuH8CPktt1Oiq7YBNUyl45zyEBWryCddZV+kycP9 GkzSUHZNXNPHv6uNwlr5Cm4tLh6B/yAfSCGFcNVtPhcX28mqpgdyojr6WMIoHkDb FixTBTdGwJS339kuAouFgxI44RhkIcSfAgMBAAGjUDBOMB0GA1UdDgQWBBSbfKHS 75POY4Myfxu+6y/swMEh5TAfBgNVHSMEGDAWgBSbfKHS75POY4Myfxu+6y/swMEh 5TAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAztRJ6G4eHwCDRDorg b6RhKPsgqBAmZuWESOt77MPtKlwBdxBclcmuIfmMQs7OBxN/qhkB1yql9yvcsOR4 pn4dmwPRyi4T0sZBOhiIcIMd6E7Zsn620Gj+vsBRqpvTeu4W3briX+X70xICQnx4 uEclS4pCo3wJGXz0mz7X27b6TDdaFsxTPi0QZxkno66NAQLO+PCplDTYFZVeDWeP yjlkuV0qc5Jjf71Tndq6ifPfYvkmchdL3Uj/0NwGJiSXE9DAmd0lzwP0bM9thJg+ dFBXtlbq/p1q2TIRJgVXKnMLjyu8e6KDO9HgojdJLmylP+3XKxewa5UdW2Hd2wqY DqLb -----END CERTIFICATE-----`) var certPem = []byte(`-----BEGIN CERTIFICATE----- MIICxTCCAa2gAwIBAgIJALEGoUYJ94AXMA0GCSqGSIb3DQEBCwUAMBYxFDASBgNV BAMMC3RvbnliYWkuY29tMB4XDTIwMDUyOTEzMTQyNVoXDTM0MDIwNTEzMTQyNVow FTETMBEGA1UEAwwKdG9ueWJhaV9jbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC AQoCggEBANjq5z2d6iBeMsaP/AAZQM5LKiBwBkUu1dy2ej6C4NLKctUAT1QqgvTz PbfQMfcUUmhNcDxz142dqzwnr4eFxWO5S9rHUwulr9CqBDRIi2CByIjJnhVgSNq1 7CWmTFTwygu82L4jH/Vjw2ZFcxMYRetCoU6Oc2nBnMlI9lr+DcHmkTsWCH3tIx31 Zbb6Hz5U8xmEjhM5JB56xKLNKt6vD7P/qPNvAwzaLpEf/yyPcTEUaa1S8ZlAgJgu 2RnrzTchDyNVfe9q5hx3STbmdfAv6qLu0hdw4GRRezfzi4gxu+Tmu9xPt/Oxz/XJ pv68MAfDE+uhnNOUSADkfmgAr392zzMCAwEAAaMXMBUwEwYDVR0lBAwwCgYIKwYB BQUHAwIwDQYJKoZIhvcNAQELBQADggEBAApVUZAC6/+PKqStMx7gWObZql2yW8oa fF9Pv74X2HUz/FFKl98vhcrPtRguni3qCdA8WkGU0SFi6QHLKBX+Qxa6eF3OU79e G+w+aDR+FSl8eiLc+CjzStlHcU2TdlPNSF+kLVnjYeuU54CXuE6NHgg0G3zQsdQE DKPU2RR32eGNajGvsljcylavYwKvLKKq70f+HeQO95ZB3yGj18tWojX5fQO9J3kC SYne3A0AjYX6fYMF0RB2s4VrZNd/7XeSUr4tEDXmmyaNeNapOxaM614s+9N6T0oB lj0AHA8ORyzUE0bdRWJEgUKg+n7lrAFngwpQ9DvhN2DNscZtw4weUWQ= -----END CERTIFICATE-----`) var keyPem = []byte(`-----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA2OrnPZ3qIF4yxo/8ABlAzksqIHAGRS7V3LZ6PoLg0spy1QBP VCqC9PM9t9Ax9xRSaE1wPHPXjZ2rPCevh4XFY7lL2sdTC6Wv0KoENEiLYIHIiMme FWBI2rXsJaZMVPDKC7zYviMf9WPDZkVzExhF60KhTo5zacGcyUj2Wv4NweaROxYI fe0jHfVltvofPlTzGYSOEzkkHnrEos0q3q8Ps/+o828DDNoukR//LI9xMRRprVLx mUCAmC7ZGevNNyEPI1V972rmHHdJNuZ18C/qou7SF3DgZFF7N/OLiDG75Oa73E+3 87HP9cmm/rwwB8MT66Gc05RIAOR+aACvf3bPMwIDAQABAoIBAE2hE4yLnSRkUcuZ 79ehMf4iDDt7m+LadhL9AxaoBAmsBhiQedNnO2KqQmYsDhWcojlNrWMVGglGaeen VDwt9YxQ3gK33tKGQztr/QExDSBGkhvR+88unCQZgx+eOicT3VsCBJdXPrK1N1K8 fAhTYYJmYBAbDtbEQXYPtIqv7QB8+JQzoYj4r6uC/6bYLFc1BL3AizSxHvNQ6qyS jVLNCw/b2XSV/Gct+JO25lMR97eTtUZDO+aCJhRHtf2yH4AVJ2kjTSDX0zAwvEyn kTqVOhoBQ9UuHuDxBDY4evXSwm/HPtnLKt+n3VJm7hNiMbkfeo5GGRPBgsgS3SXn PBjgqjECgYEA9y6corfZu/AqxxnvDi1wBreK1MxRoSI6sOPqusPX/i6bScnG4khH hfIJsQtjjz6yYoB/N/Ph6XKPh6FwaICmZKVmiQafDy1wdGhBnjKZUX2+z6rGW82C azEhXaCvsQrP+8dlDQwLKX9W6wl+msfPigtOgHoW+UjTKx24VLhZl00CgYEA4Kfm uZKIZ5drXN0BxqeHKgtAueWEbeonmxjVGdcCqhSyIzZ/tb6hjKOL0MKqkzug9Ful kymdaR/tUFHzbF91MTOSooWAz0VuNm/9msooSLA6wGfixeoijLS2AXoe/zuE/BpO +BCYjyrN+m6RjQFqzJdiM8vqbfvrSMJ+/rg3wH8CgYEA9LRAfRZlh5kLwG/8KZzx +rRZzLE5Xrv0PopkJuEbQ5gAQ9xt+DZ2GDS1Q4By36zCDKIJT+sxC1tOnIdGMS6r i5fzGlRjwzLI0XUlAOg2wGYsMIpwNRIOuu+4iGg7hpmdrTSI5ZG2uy5FbgnIPJLy 80aeQLKda8ycwWJ6yeR3TUECgYAJWtR/u7tUXPjKiCVvyUAWnxtV4lnOXebCTZlq Fwr0XCJC1x0gS0zc116WFdUWhnAgXMSbSStV2k9+fbseMydlIhmkDN0dRG3fdHBi BrMAu93mby0BQsungkrl6tjplefmu424RLClnYmwOPR0o693z4H2WDJt3ASjJf41 yyP/LwKBgQDiS6GRXSX59WkMxQREnpInH25RKLdowBh1lDI9ZsRVWEWGGkwJwhCA QMcNGD/Z6XTnk3w22u66N69dcefteAOC4425inNRcG5MM3s3F+xJ3i/RHu157zIj 3RfPQhGacZLLy4EKBeL2FUH75T2Qzn3H32h3MaALPc6DCj9HjLRsqQ== -----END RSA PRIVATE KEY-----`) console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"https/https-client-post.html":{"url":"https/https-client-post.html","title":"https client post json","keywords":"","body":"package main import ( \"crypto/tls\" \"crypto/x509\" \"fmt\" \"io/ioutil\" \"net/http\" \"strings\" ) func main() { httppost() } func httppost() { pool := x509.NewCertPool() pool.AppendCertsFromPEM(caData) cliCrt, err := tls.X509KeyPair(certPem, keyPem) if err != nil { fmt.Println(\"Loadx509keypair err:\", err) return } tr := &http.Transport{ TLSClientConfig: &tls.Config{ RootCAs: pool, Certificates: []tls.Certificate{cliCrt}, }, } client := &http.Client{Transport: tr} //req.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\") data := `{\"user_name\":\"yandun\",\"pwd\":\"123456\"}` req, err := http.NewRequest(\"POST\", \"https://192.168.3.3:8081/auth\", strings.NewReader(data)) if err != nil { fmt.Println(err) } req.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\") resp, err := client.Do(req) if err != nil { fmt.Println(err) } defer resp.Body.Close() //post数据并接收http响应 respBody, err := ioutil.ReadAll(resp.Body) if err!=nil{ }else { fmt.Printf(\"response data:%v\\n\", string(respBody)) } } var caData = []byte(`-----BEGIN CERTIFICATE----- MIIC/zCCAeegAwIBAgIJAKL+fvYeq6a9MA0GCSqGSIb3DQEBCwUAMBYxFDASBgNV BAMMC3RvbnliYWkuY29tMB4XDTIwMDUyOTEzMDMyNFoXDTM0MDIwNTEzMDMyNFow FjEUMBIGA1UEAwwLdG9ueWJhaS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw ggEKAoIBAQCuIgtaFsE9hlc8/aqnRQ2c3xH9SphTKno+dSgoN0GbXakvVRCToRbc E15HtqlbtXqgnwpffC5OqePpG8S0wH6TufvA0k5MQ4W7/YLwJfoQgKkafzsYSz6U 5deTn0+CxTeVvEUfi1TaGDWjf2gNhlxu35ESPC6kjErb1wdAHiJVDWWpSIRFAoYD mmjFXchjnsqHHzRG5J1/7XP9xuH8CPktt1Oiq7YBNUyl45zyEBWryCddZV+kycP9 GkzSUHZNXNPHv6uNwlr5Cm4tLh6B/yAfSCGFcNVtPhcX28mqpgdyojr6WMIoHkDb FixTBTdGwJS339kuAouFgxI44RhkIcSfAgMBAAGjUDBOMB0GA1UdDgQWBBSbfKHS 75POY4Myfxu+6y/swMEh5TAfBgNVHSMEGDAWgBSbfKHS75POY4Myfxu+6y/swMEh 5TAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAztRJ6G4eHwCDRDorg b6RhKPsgqBAmZuWESOt77MPtKlwBdxBclcmuIfmMQs7OBxN/qhkB1yql9yvcsOR4 pn4dmwPRyi4T0sZBOhiIcIMd6E7Zsn620Gj+vsBRqpvTeu4W3briX+X70xICQnx4 uEclS4pCo3wJGXz0mz7X27b6TDdaFsxTPi0QZxkno66NAQLO+PCplDTYFZVeDWeP yjlkuV0qc5Jjf71Tndq6ifPfYvkmchdL3Uj/0NwGJiSXE9DAmd0lzwP0bM9thJg+ dFBXtlbq/p1q2TIRJgVXKnMLjyu8e6KDO9HgojdJLmylP+3XKxewa5UdW2Hd2wqY DqLb -----END CERTIFICATE-----`) var certPem = []byte(`-----BEGIN CERTIFICATE----- MIICxTCCAa2gAwIBAgIJALEGoUYJ94AXMA0GCSqGSIb3DQEBCwUAMBYxFDASBgNV BAMMC3RvbnliYWkuY29tMB4XDTIwMDUyOTEzMTQyNVoXDTM0MDIwNTEzMTQyNVow FTETMBEGA1UEAwwKdG9ueWJhaV9jbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC AQoCggEBANjq5z2d6iBeMsaP/AAZQM5LKiBwBkUu1dy2ej6C4NLKctUAT1QqgvTz PbfQMfcUUmhNcDxz142dqzwnr4eFxWO5S9rHUwulr9CqBDRIi2CByIjJnhVgSNq1 7CWmTFTwygu82L4jH/Vjw2ZFcxMYRetCoU6Oc2nBnMlI9lr+DcHmkTsWCH3tIx31 Zbb6Hz5U8xmEjhM5JB56xKLNKt6vD7P/qPNvAwzaLpEf/yyPcTEUaa1S8ZlAgJgu 2RnrzTchDyNVfe9q5hx3STbmdfAv6qLu0hdw4GRRezfzi4gxu+Tmu9xPt/Oxz/XJ pv68MAfDE+uhnNOUSADkfmgAr392zzMCAwEAAaMXMBUwEwYDVR0lBAwwCgYIKwYB BQUHAwIwDQYJKoZIhvcNAQELBQADggEBAApVUZAC6/+PKqStMx7gWObZql2yW8oa fF9Pv74X2HUz/FFKl98vhcrPtRguni3qCdA8WkGU0SFi6QHLKBX+Qxa6eF3OU79e G+w+aDR+FSl8eiLc+CjzStlHcU2TdlPNSF+kLVnjYeuU54CXuE6NHgg0G3zQsdQE DKPU2RR32eGNajGvsljcylavYwKvLKKq70f+HeQO95ZB3yGj18tWojX5fQO9J3kC SYne3A0AjYX6fYMF0RB2s4VrZNd/7XeSUr4tEDXmmyaNeNapOxaM614s+9N6T0oB lj0AHA8ORyzUE0bdRWJEgUKg+n7lrAFngwpQ9DvhN2DNscZtw4weUWQ= -----END CERTIFICATE-----`) var keyPem = []byte(`-----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA2OrnPZ3qIF4yxo/8ABlAzksqIHAGRS7V3LZ6PoLg0spy1QBP VCqC9PM9t9Ax9xRSaE1wPHPXjZ2rPCevh4XFY7lL2sdTC6Wv0KoENEiLYIHIiMme FWBI2rXsJaZMVPDKC7zYviMf9WPDZkVzExhF60KhTo5zacGcyUj2Wv4NweaROxYI fe0jHfVltvofPlTzGYSOEzkkHnrEos0q3q8Ps/+o828DDNoukR//LI9xMRRprVLx mUCAmC7ZGevNNyEPI1V972rmHHdJNuZ18C/qou7SF3DgZFF7N/OLiDG75Oa73E+3 87HP9cmm/rwwB8MT66Gc05RIAOR+aACvf3bPMwIDAQABAoIBAE2hE4yLnSRkUcuZ 79ehMf4iDDt7m+LadhL9AxaoBAmsBhiQedNnO2KqQmYsDhWcojlNrWMVGglGaeen VDwt9YxQ3gK33tKGQztr/QExDSBGkhvR+88unCQZgx+eOicT3VsCBJdXPrK1N1K8 fAhTYYJmYBAbDtbEQXYPtIqv7QB8+JQzoYj4r6uC/6bYLFc1BL3AizSxHvNQ6qyS jVLNCw/b2XSV/Gct+JO25lMR97eTtUZDO+aCJhRHtf2yH4AVJ2kjTSDX0zAwvEyn kTqVOhoBQ9UuHuDxBDY4evXSwm/HPtnLKt+n3VJm7hNiMbkfeo5GGRPBgsgS3SXn PBjgqjECgYEA9y6corfZu/AqxxnvDi1wBreK1MxRoSI6sOPqusPX/i6bScnG4khH hfIJsQtjjz6yYoB/N/Ph6XKPh6FwaICmZKVmiQafDy1wdGhBnjKZUX2+z6rGW82C azEhXaCvsQrP+8dlDQwLKX9W6wl+msfPigtOgHoW+UjTKx24VLhZl00CgYEA4Kfm uZKIZ5drXN0BxqeHKgtAueWEbeonmxjVGdcCqhSyIzZ/tb6hjKOL0MKqkzug9Ful kymdaR/tUFHzbF91MTOSooWAz0VuNm/9msooSLA6wGfixeoijLS2AXoe/zuE/BpO +BCYjyrN+m6RjQFqzJdiM8vqbfvrSMJ+/rg3wH8CgYEA9LRAfRZlh5kLwG/8KZzx +rRZzLE5Xrv0PopkJuEbQ5gAQ9xt+DZ2GDS1Q4By36zCDKIJT+sxC1tOnIdGMS6r i5fzGlRjwzLI0XUlAOg2wGYsMIpwNRIOuu+4iGg7hpmdrTSI5ZG2uy5FbgnIPJLy 80aeQLKda8ycwWJ6yeR3TUECgYAJWtR/u7tUXPjKiCVvyUAWnxtV4lnOXebCTZlq Fwr0XCJC1x0gS0zc116WFdUWhnAgXMSbSStV2k9+fbseMydlIhmkDN0dRG3fdHBi BrMAu93mby0BQsungkrl6tjplefmu424RLClnYmwOPR0o693z4H2WDJt3ASjJf41 yyP/LwKBgQDiS6GRXSX59WkMxQREnpInH25RKLdowBh1lDI9ZsRVWEWGGkwJwhCA QMcNGD/Z6XTnk3w22u66N69dcefteAOC4425inNRcG5MM3s3F+xJ3i/RHu157zIj 3RfPQhGacZLLy4EKBeL2FUH75T2Qzn3H32h3MaALPc6DCj9HjLRsqQ== -----END RSA PRIVATE KEY-----`) console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"https/https-server-router.html":{"url":"https/https-server-router.html","title":"https 双向认证 路由","keywords":"","body":"package main import ( \"crypto/tls\" \"crypto/x509\" \"fmt\" \"io\" \"io/ioutil\" \"net/http\" ) type myhandler struct { } func (h *myhandler) ServeHTTP(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"Hi, This is an example of http service in golang!\\n\") } func aServer(w http.ResponseWriter, req *http.Request) { io.WriteString(w, \"a!\\n\") } func bServer(w http.ResponseWriter, req *http.Request) { io.WriteString(w, \"b!\\n\") } func main() { // 注册路由 http.HandleFunc(\"/a\", aServer) http.HandleFunc(\"/b\", bServer) // pool := x509.NewCertPool() caCertPath := \"ca.crt\" caCrt, err := ioutil.ReadFile(caCertPath) if err != nil { fmt.Println(\"ReadFile err:\", err) return } pool.AppendCertsFromPEM(caCrt) s := &http.Server{ Addr: \":8081\", // Handler: &myhandler{}, Handler: nil, TLSConfig: &tls.Config{ ClientCAs: pool, ClientAuth: tls.RequireAndVerifyClientCert, }, } err = s.ListenAndServeTLS(\"server.crt\", \"server.key\") if err != nil { fmt.Println(\"ListenAndServeTLS err:\", err) } } curl https://192.168.20.133:8081/a --cert /opt/CloudLink/https-client/client.crt --key /opt/CloudLink/https-client/client.key --cacert /opt/CloudLink/https-client/ca.crt a! curl https://192.168.20.133:8081/b --cert /opt/CloudLink/https-client/client.crt --key /opt/CloudLink/https-client/client.key --cacert /opt/CloudLink/https-client/ca.crt b! console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"teshu.html":{"url":"teshu.html","title":"test","keywords":"","body":"Markdown中Latex常用语法 常用希腊字母表 Name Display Capital Case Display Var Case Display \\alpha $\\alpha$ \\beta $\\beta$ \\gamma $\\gamma$ \\Gamma $\\Gamma$ \\theta $\\theta$ \\Theta $\\Theta$ \\vartheta $\\vartheta$ \\mu $\\mu$ \\delta $\\delta$ \\Delta $\\Delta$ \\epsilon $\\epsilon$ \\varepsilon $\\varepsilon$ \\sigma $\\sigma$ \\Sigma $\\Sigma$ \\varsigma $\\varsigma$ \\pi $\\pi$ \\Pi $\\Pi$ \\varpi $\\varpi$ \\omega $\\omega$ \\Omega $\\Omega$ \\xi $\\xi$ \\Xi $\\Xi$ \\zeta $\\zeta$ \\chi $\\chi$ \\rho $\\rho$ \\varrho $\\varrho$ \\phi $\\phi$ \\Phi $\\Phi$ \\varphi $\\varphi$ \\eta $\\eta$ \\lambda $\\lambda$ \\Lambda $\\Lambda$ \\kappa $\\kappa$ \\nu $\\nu$ \\upsilon $\\upsilon$ \\Upsilon $\\Upsilon$ \\psi $\\psi$ \\Psi $\\Psi$ \\tau $\\tau$ \\iota $\\iota$ o $o$ 常用特殊字符表 Name Display Name Display Name Display Name Display \\times $\\times$ \\div $\\div$ \\pm $\\pm$ \\mp $\\mp$ \\otimes $\\otimes$ \\ominus $\\ominus$ \\oplus $\\oplus$ \\odot $\\odot$ \\oslash $\\oslash$ \\triangleq $\\triangleq$ \\ne $\\ne$ \\equiv $\\equiv$ \\lt $\\lt$ \\gt $\\gt$ \\le $\\le$ \\ge $\\ge$ \\cup $\\cup$ \\cap $\\cap$ \\Cup $\\Cup$ \\Cap $\\Cap$ \\bigcup $\\bigcup$ \\bigcap $\\bigcap$ \\ast $\\ast$ \\star $\\star$ \\bigotimes $\\bigotimes$ \\bigoplus $\\bigoplus$ \\circ $\\circ$ \\bullet $\\bullet$ \\bigcirc $\\bigcirc$ \\amalg $\\amalg$ \\to $\\to$ \\infty $\\infty$ \\vee $\\vee$ \\wedge $\\wedge$ \\lhd $\\lhd$ \\rhd $\\rhd$ \\bigvee $\\bigvee$ \\bigwedge $\\bigwedge$ \\unlhd $\\unlhd$ \\unrhd $\\unrhd$ \\sqcap $\\sqcap$ \\sqcup $\\sqcup$ \\prec $\\prec$ \\succ $\\succ$ \\subset $\\subset$ \\supset $\\supset$ \\sim $\\sim$ \\approx $\\approx$ \\subseteq $\\subseteq$ \\supseteq $\\supseteq$ \\cong $\\cong$ \\doteq $\\doteq$ \\setminus $\\setminus$ \\mid $\\mid$ \\ll $\\ll$ \\gg $\\gg$ \\parallel $\\parallel$ \\Join $\\Join$ \\in $\\in$ \\notin $\\notin$ \\propto $\\propto$ \\neg $\\neg$ \\ldots $\\ldots$ \\cdots $\\cdots$ \\forall $\\forall$ \\exists $\\exists$ \\vdots $\\vdots$ \\ddots $\\ddots$ \\aleph $\\aleph$ \\nabla $\\nabla$ \\imath $\\imath$ \\jmath $\\jmath$ \\ell $\\ell$ \\partial $\\partial$ \\int $\\int$ \\oint $\\oint$ \\uplus $\\uplus$ \\biguplus $\\biguplus$ 其他 Name Display Name Display \\triangleleft $\\triangleleft$ \\triangleright $\\triangleright$ \\bigtriangleup $\\bigtriangleup$ \\bigtriangledown $\\bigtriangledown$ \\uparrow $\\uparrow$ \\downarrow $\\downarrow$ \\leftarrow $\\leftarrow$ \\rightarrow $\\rightarrow$ \\Leftarrow $\\Leftarrow$ \\Rightarrow $\\Rightarrow$ \\longleftarrow $\\longleftarrow$ \\longrightarrow $\\longrightarrow$ \\Longleftarrow $\\Longleftarrow$ \\Longrightarrow $\\Longrightarrow$ \\leftrightarrow $\\leftrightarrow$ \\longleftrightarrow $\\longleftrightarrow$ \\Leftrightarrow $\\Leftrightarrow$ \\Longleftrightarrow $\\Longleftrightarrow$ \\leftharpoonup $\\leftharpoonup$ \\rightharpoonup $\\rightharpoonup$ \\leftharpoondown $\\leftharpoondown$ \\rightharpoondown $\\rightharpoondown$ \\rightleftharpoons $\\rightleftharpoons$ \\S $\\S$ \\nwarrow $\\nwarrow$ \\nearrow $\\nearrow$ \\swarrow $\\swarrow$ \\searrow $\\searrow$ \\triangle $\\triangle$ \\box $\\Box$ \\diamond $\\diamond$ \\diamondsuit $\\diamondsuit$ \\heartsuit $\\heartsuit$ \\clubsuit $\\clubsuit$ \\spadesuit $\\spadesuit$ 公式语法 上下标_ ^ , _{}^{}： y = x_i^{a_1^2} 公式中插入文本\\mbox{}： y = x^2 \\; \\mbox{(二次函数)} 公式中插入空格\\, \\; \\quad \\qquad间隔依次变宽： ab a\\,b a\\;b a\\quad b a\\qquad b 字母上方横线\\overline{}, \\bar{}： \\overline{xyz} \\mbox{ 或 } \\bar{x} 字母下方横线\\underline{}： \\underline{ABC} 字母上方波浪线\\tilde{}, \\widetilde{}： \\tilde{A} \\mbox{ 或 } \\widetilde{ABC} 字母上方尖号^\\hat{}, \\widehat{}： \\hat{A} \\mbox{ 或 } \\widehat{ABC} 字母上方箭头\\vec{}, \\overleftarrow{}, \\overrightarrow{}： \\vec{ab} \\mbox{ 或 } \\overleftarrow{ab} \\mbox{ 或 } \\overrightarrow{ab} 字母上方花括号\\overbrace{}，或下方花括号\\underbrace{}： \\overbrace{1+2+3} \\mbox{ 或 } \\underbrace{1+2+3} 字母上方点号\\dot{}, \\ddot{}： \\dot{a} \\mbox{ 或 } \\ddot{a} 省略号\\dots, \\cdots 1,2,\\dots \\qquad 1,2,\\cdots 积分\\int_{}^{}： \\int_{-\\infty}^{+\\infty} f(x) \\mathrm{d}x 双重积分\\iint： \\iint_{-\\infty}^{+\\infty} f(x,y) \\mathrm{d}x \\mathrm{d}y 行内积分：$\\int{-\\infty}^{+\\infty} f(x) \\mathrm{d}x$ 行内积分limits模式`\\int\\limits{}^{}：$\\int\\limits_{-\\infty}^{+\\infty} f(x) \\mathrm{d}x$ 行内积分display模式\\displaystyle \\int{}^{}`：$\\displaystyle \\int{-\\infty}^{+\\infty} f(x) \\mathrm{d}x$ 圆圈积分\\oint： \\oint_{-\\infty}^{+\\infty} 求和\\sum_{}^{}： \\sum_{i=1}^{n} i^2 行内求和：$\\sum{i=1}^{n} i^2$ 行内求和limits模式`\\sum\\limits{}^{}：$\\sum\\limits_{i=1}^{n} i^2$ 行内求和display模式\\displaystyle \\sum{}^{}`：$\\displaystyle \\sum{i=1}^{n} i^2$ 求乘积\\prod_{}^{}： \\prod_{i=1}^{n} a_i 分数\\frac{up}{down}： x_1,x_2 = \\frac{b^2 \\pm 4ac}{2a} 根号\\sqrt： r = \\sqrt{x^2+y^2} 多次根号\\sqrt[n]： x^{2/3} = \\sqrt[3]{x^2} 编号 插入编号： 使用\\tag指令指定公式的具体编号，并使用\\label指令埋下锚点。如y=x^2 \\tag{1.5a} \\label{eq:test}： y=x^2 \\tag{1.5a}\\label{eq:test} 引用编号： 使用\\eqref指令引用前面埋下的锚点，\\eqref{eq:test}将显示为： \\eqref{eq:test} 方程组 左侧花括号 \\begin{equation} % \\begin{equation*} 加'*'去掉公式编号 \\left\\{ \\begin{aligned} %请使用'aligned'或'align*' 2x + y &= 1 \\\\ %加'&'指定对齐位置 2x + 2y &= 2 \\end{aligned} \\right. \\end{equation} % \\end{equation*} 加'*'去掉公式编号 % 注意：在 markdown 环境下，某些特殊字符，如'\\', '*'等，会首先被 markdown 语法转义，然后再被 Latex 转义。 % 因此有时候 '\\{'需要写作'\\\\{'，'*'需要写作'\\*'，'\\\\'需要写作'\\\\\\\\'等，视不同的解释环境而定 \\begin{equation} \\left\\\\{ \\begin{aligned} 2x + y &= 1 \\\\\\\\ 2x + 2y &= 2 \\end{aligned} \\right. \\end{equation} 注：如果各个方程需要在某个字符处对齐（如等号对齐），只需在所有要对齐的字符前加上 & 符号。如果不需要公式编号，只需在宏包名称后加上 * 号。 分情况讨论方程式 f(x) = \\begin{cases} x^2 \\qquad & a \\gt 0 \\\\ e^x \\qquad & a \\le 0 \\end{cases} f(x) = \\begin{cases} x^2 \\qquad & a \\gt 0 \\\\\\\\ e^x \\qquad & a \\le 0 \\end{cases} \\begin{aligned} a &= 1 \\\\\\\\ bcd &= 2 \\end{aligned} ———————————————— 版权声明：本文为CSDN博主「Henry606」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/HaleyPKU/java/article/details/80341932 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"byte.html":{"url":"byte.html","title":"string byte","keywords":"","body":" https://www.cnblogs.com/zhangboyu/p/7623712.html console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"json/json.html":{"url":"json/json.html","title":"json","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"json/data2json.html":{"url":"json/data2json.html","title":"将数据转换为json","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"json/struct2json.html":{"url":"json/struct2json.html","title":"struct 2 json","keywords":"","body":"package main import ( \"encoding/json\" \"fmt\" ) type Monster struct { Name string Age int Birthday string Sal float64 Skill string Names []string } //写一个 testStruct()结构体的序列化方法 func testStruct() { monster := Monster{ Name: \"牛魔王\", Age: 500, Birthday: \"2019-10-27\", Sal: 10000.01, Skill: \"牛魔拳\", Names: []string{\"xxx\", \"ddd\"}, } // 将Monster结构体序列化 data, err := json.Marshal(&monster) if err != nil { fmt.Printf(\"序列化错误 err is %v\", err) } //输出序列化结果 fmt.Printf(\"monster序列化后 = %v\", string(data)) } func main() { testStruct() } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"json/map2json.html":{"url":"json/map2json.html","title":"map 2 json","keywords":"","body":"package main import ( \"encoding/json\" \"fmt\" ) type Monster struct { Name string Age int Birthday string Sal float64 Skill string Names []string } // map序列化 func testMap() { //定义一个map var a map[string]interface{} //使用map之前 必须make一下 a = make(map[string]interface{}) a[\"name\"] = \"红孩儿\" a[\"age\"] = 18 a[\"address\"] = \"重庆洪崖洞\" a[\"struct\"] = Monster{ Name: \"牛魔王\", Age: 500, Birthday: \"2019-10-27\", Sal: 10000.01, Skill: \"牛魔拳\", Names: []string{\"xxx\", \"ddd\"}, } // 将a map结构体序列化 data, err := json.Marshal(a) if err != nil { fmt.Printf(\"序列化错误 err is %v\", err) } //输出序列化结果 fmt.Printf(\"map序列化后 = %v\", string(data)) } func main() { //结构体， map, slice进行序列化 testMap() } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"json/string-map2json.html":{"url":"json/string-map2json.html","title":"(string key string vlaue map) 2 json","keywords":"","body":"package main import ( \"encoding/json\" \"fmt\" ) // map序列化 func testMap() { //定义一个map var a map[string]string //使用map之前 必须make一下 a = make(map[string]string) a[\"name\"] = \"红孩儿\" a[\"age\"] = \"18\" a[\"address\"] = \"重庆洪崖洞\" // 将a map结构体序列化 data, err := json.Marshal(a) if err != nil { fmt.Printf(\"序列化错误 err is %v\", err) } //输出序列化结果 fmt.Printf(\"map序列化后 = %v\", string(data)) } func main() { //结构体， map, slice进行序列化 testMap() } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"json/slice2json.html":{"url":"json/slice2json.html","title":"slice 2 json","keywords":"","body":"package main import ( \"encoding/json\" \"fmt\" ) type Monster struct { Name string Age int Birthday string Sal float64 Skill string } // slice进行序列化 func testSlice() { var slice []map[string]interface{} // 定义了一个切片，里面是map格式 map[string]interface{} var m1 map[string]interface{} //定义切片中的第一个map M1 m1 = make(map[string]interface{}) m1[\"name\"] = \"Matt\" m1[\"age\"] = 36 m1[\"address\"] = [2]string{\"重庆沙坪坝\", \"上海\"} slice = append(slice, m1) var m2 map[string]interface{} //定义切片中的第2个map M2 m2 = make(map[string]interface{}) m2[\"name\"] = \"damon\" m2[\"age\"] = 36 m2[\"address\"] = \"沙坪坝\" slice = append(slice, m2) // 将slice进行序列化 data, err := json.Marshal(slice) if err != nil { fmt.Printf(\"序列化错误 err is %v\", err) } //输出序列化结果 fmt.Println(string(data)) } func main() { //结构体， map, slice进行序列化 testSlice() } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"json/slice-struct2json.html":{"url":"json/slice-struct2json.html","title":"序列化slice 元素是struct","keywords":"","body":"package main import ( \"encoding/json\" \"fmt\" ) type App struct { Name string Age int Birthday string Sal float64 Skill string Names []string } // map序列化 func testMap() { var slice []App //定义一个map m1 := App{ Name: \"sxs\", Age: 1, Names: []string{\"xxx\", \"bbb\"}} slice = append(slice, m1) data, err := json.Marshal(slice) if err != nil { fmt.Printf(\"序列化错误 err is %v\", err) } //输出序列化结果 fmt.Println(string(data)) } func main() { //结构体， map, slice进行序列化 testMap() } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"unjson/unjson.html":{"url":"unjson/unjson.html","title":"反序列化json","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"unjson/json2array.html":{"url":"unjson/json2array.html","title":"json2array","keywords":"","body":"package main import ( \"encoding/json\" \"fmt\" \"strings\" ) type T struct { Return []Desc `json:\"return\"` } type Desc struct { Used string `json:\"used\"` Volume string `'json:\"volume\"` } func main() { str := `{\"return\":[ { \"used\":\"3Mb\", \"volume\":\"a\" }, { \"used\":\"3Mb\", \"volume\":\"bbb/a\" } ] }` t_struct := T{} err := json.Unmarshal([]byte(str), &t_struct) if err == nil { fmt.Println(t_struct.Return[0].Volume) fmt.Printf(\"%v\\n\", strings.Split(t_struct.Return[1].Volume, \"/\")) } } package main import ( \"crypto/tls\" \"crypto/x509\" \"fmt\" \"io/ioutil\" \"net/http\" \"encoding/json\" \"strings\" ) type App struct { Appname string `json:\"appname\"` Apptype string `json:\"apptype\"` Metadata string `json:\"metadata\"` Owerns []string `json:\"owerns\"` } type Appss struct { Appss []App `json:\"appss\"` } // type User struct { Username string `json:\"user_name\"` Pwd string `json:\"pwd\"` } func main() { user := User{ Username: \"yandun\", Pwd: \"123456\", } data, _ := json.Marshal(&user) userdata:=string(data) httppost(userdata) } func httppost(data string) { pool := x509.NewCertPool() pool.AppendCertsFromPEM(caData) cliCrt, err := tls.X509KeyPair(certPem, keyPem) if err != nil { fmt.Println(\"Loadx509keypair err:\", err) return } tr := &http.Transport{ TLSClientConfig: &tls.Config{ RootCAs: pool, Certificates: []tls.Certificate{cliCrt}, }, } client := &http.Client{Transport: tr} //req.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\") //data := `{\"user_name\":\"yandun\",\"pwd\":\"123456\"}` req, err := http.NewRequest(\"POST\", \"https://192.168.3.3:8081/auth\", strings.NewReader(data)) if err != nil { fmt.Println(err) } req.Header.Set(\"Content-Type\", \"application/x-www-form-urlencoded\") resp, err := client.Do(req) if err != nil { fmt.Println(err) } defer resp.Body.Close() //post数据并接收http响应 respBody, err := ioutil.ReadAll(resp.Body) if err != nil { } else { decoded :=Appss{} err:=json.Unmarshal(respBody,&decoded) if err!=nil{ fmt.Println(err) } //fmt.Println(decoded) fmt.Println(decoded.Appss[0].Owerns[0]) //fmt.Printf(\"response data:%v\\n\", string(respBody)) } } var caData = []byte(`-----BEGIN CERTIFICATE----- MIIC/zCCAeegAwIBAgIJAKL+fvYeq6a9MA0GCSqGSIb3DQEBCwUAMBYxFDASBgNV BAMMC3RvbnliYWkuY29tMB4XDTIwMDUyOTEzMDMyNFoXDTM0MDIwNTEzMDMyNFow FjEUMBIGA1UEAwwLdG9ueWJhaS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw ggEKAoIBAQCuIgtaFsE9hlc8/aqnRQ2c3xH9SphTKno+dSgoN0GbXakvVRCToRbc E15HtqlbtXqgnwpffC5OqePpG8S0wH6TufvA0k5MQ4W7/YLwJfoQgKkafzsYSz6U 5deTn0+CxTeVvEUfi1TaGDWjf2gNhlxu35ESPC6kjErb1wdAHiJVDWWpSIRFAoYD mmjFXchjnsqHHzRG5J1/7XP9xuH8CPktt1Oiq7YBNUyl45zyEBWryCddZV+kycP9 GkzSUHZNXNPHv6uNwlr5Cm4tLh6B/yAfSCGFcNVtPhcX28mqpgdyojr6WMIoHkDb FixTBTdGwJS339kuAouFgxI44RhkIcSfAgMBAAGjUDBOMB0GA1UdDgQWBBSbfKHS 75POY4Myfxu+6y/swMEh5TAfBgNVHSMEGDAWgBSbfKHS75POY4Myfxu+6y/swMEh 5TAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAztRJ6G4eHwCDRDorg b6RhKPsgqBAmZuWESOt77MPtKlwBdxBclcmuIfmMQs7OBxN/qhkB1yql9yvcsOR4 pn4dmwPRyi4T0sZBOhiIcIMd6E7Zsn620Gj+vsBRqpvTeu4W3briX+X70xICQnx4 uEclS4pCo3wJGXz0mz7X27b6TDdaFsxTPi0QZxkno66NAQLO+PCplDTYFZVeDWeP yjlkuV0qc5Jjf71Tndq6ifPfYvkmchdL3Uj/0NwGJiSXE9DAmd0lzwP0bM9thJg+ dFBXtlbq/p1q2TIRJgVXKnMLjyu8e6KDO9HgojdJLmylP+3XKxewa5UdW2Hd2wqY DqLb -----END CERTIFICATE-----`) var certPem = []byte(`-----BEGIN CERTIFICATE----- MIICxTCCAa2gAwIBAgIJALEGoUYJ94AXMA0GCSqGSIb3DQEBCwUAMBYxFDASBgNV BAMMC3RvbnliYWkuY29tMB4XDTIwMDUyOTEzMTQyNVoXDTM0MDIwNTEzMTQyNVow FTETMBEGA1UEAwwKdG9ueWJhaV9jbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC AQoCggEBANjq5z2d6iBeMsaP/AAZQM5LKiBwBkUu1dy2ej6C4NLKctUAT1QqgvTz PbfQMfcUUmhNcDxz142dqzwnr4eFxWO5S9rHUwulr9CqBDRIi2CByIjJnhVgSNq1 7CWmTFTwygu82L4jH/Vjw2ZFcxMYRetCoU6Oc2nBnMlI9lr+DcHmkTsWCH3tIx31 Zbb6Hz5U8xmEjhM5JB56xKLNKt6vD7P/qPNvAwzaLpEf/yyPcTEUaa1S8ZlAgJgu 2RnrzTchDyNVfe9q5hx3STbmdfAv6qLu0hdw4GRRezfzi4gxu+Tmu9xPt/Oxz/XJ pv68MAfDE+uhnNOUSADkfmgAr392zzMCAwEAAaMXMBUwEwYDVR0lBAwwCgYIKwYB BQUHAwIwDQYJKoZIhvcNAQELBQADggEBAApVUZAC6/+PKqStMx7gWObZql2yW8oa fF9Pv74X2HUz/FFKl98vhcrPtRguni3qCdA8WkGU0SFi6QHLKBX+Qxa6eF3OU79e G+w+aDR+FSl8eiLc+CjzStlHcU2TdlPNSF+kLVnjYeuU54CXuE6NHgg0G3zQsdQE DKPU2RR32eGNajGvsljcylavYwKvLKKq70f+HeQO95ZB3yGj18tWojX5fQO9J3kC SYne3A0AjYX6fYMF0RB2s4VrZNd/7XeSUr4tEDXmmyaNeNapOxaM614s+9N6T0oB lj0AHA8ORyzUE0bdRWJEgUKg+n7lrAFngwpQ9DvhN2DNscZtw4weUWQ= -----END CERTIFICATE-----`) var keyPem = []byte(`-----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA2OrnPZ3qIF4yxo/8ABlAzksqIHAGRS7V3LZ6PoLg0spy1QBP VCqC9PM9t9Ax9xRSaE1wPHPXjZ2rPCevh4XFY7lL2sdTC6Wv0KoENEiLYIHIiMme FWBI2rXsJaZMVPDKC7zYviMf9WPDZkVzExhF60KhTo5zacGcyUj2Wv4NweaROxYI fe0jHfVltvofPlTzGYSOEzkkHnrEos0q3q8Ps/+o828DDNoukR//LI9xMRRprVLx mUCAmC7ZGevNNyEPI1V972rmHHdJNuZ18C/qou7SF3DgZFF7N/OLiDG75Oa73E+3 87HP9cmm/rwwB8MT66Gc05RIAOR+aACvf3bPMwIDAQABAoIBAE2hE4yLnSRkUcuZ 79ehMf4iDDt7m+LadhL9AxaoBAmsBhiQedNnO2KqQmYsDhWcojlNrWMVGglGaeen VDwt9YxQ3gK33tKGQztr/QExDSBGkhvR+88unCQZgx+eOicT3VsCBJdXPrK1N1K8 fAhTYYJmYBAbDtbEQXYPtIqv7QB8+JQzoYj4r6uC/6bYLFc1BL3AizSxHvNQ6qyS jVLNCw/b2XSV/Gct+JO25lMR97eTtUZDO+aCJhRHtf2yH4AVJ2kjTSDX0zAwvEyn kTqVOhoBQ9UuHuDxBDY4evXSwm/HPtnLKt+n3VJm7hNiMbkfeo5GGRPBgsgS3SXn PBjgqjECgYEA9y6corfZu/AqxxnvDi1wBreK1MxRoSI6sOPqusPX/i6bScnG4khH hfIJsQtjjz6yYoB/N/Ph6XKPh6FwaICmZKVmiQafDy1wdGhBnjKZUX2+z6rGW82C azEhXaCvsQrP+8dlDQwLKX9W6wl+msfPigtOgHoW+UjTKx24VLhZl00CgYEA4Kfm uZKIZ5drXN0BxqeHKgtAueWEbeonmxjVGdcCqhSyIzZ/tb6hjKOL0MKqkzug9Ful kymdaR/tUFHzbF91MTOSooWAz0VuNm/9msooSLA6wGfixeoijLS2AXoe/zuE/BpO +BCYjyrN+m6RjQFqzJdiM8vqbfvrSMJ+/rg3wH8CgYEA9LRAfRZlh5kLwG/8KZzx +rRZzLE5Xrv0PopkJuEbQ5gAQ9xt+DZ2GDS1Q4By36zCDKIJT+sxC1tOnIdGMS6r i5fzGlRjwzLI0XUlAOg2wGYsMIpwNRIOuu+4iGg7hpmdrTSI5ZG2uy5FbgnIPJLy 80aeQLKda8ycwWJ6yeR3TUECgYAJWtR/u7tUXPjKiCVvyUAWnxtV4lnOXebCTZlq Fwr0XCJC1x0gS0zc116WFdUWhnAgXMSbSStV2k9+fbseMydlIhmkDN0dRG3fdHBi BrMAu93mby0BQsungkrl6tjplefmu424RLClnYmwOPR0o693z4H2WDJt3ASjJf41 yyP/LwKBgQDiS6GRXSX59WkMxQREnpInH25RKLdowBh1lDI9ZsRVWEWGGkwJwhCA QMcNGD/Z6XTnk3w22u66N69dcefteAOC4425inNRcG5MM3s3F+xJ3i/RHu157zIj 3RfPQhGacZLLy4EKBeL2FUH75T2Qzn3H32h3MaALPc6DCj9HjLRsqQ== -----END RSA PRIVATE KEY-----`) console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"etcd/etcd.html":{"url":"etcd/etcd.html","title":"etcd","keywords":"","body":" console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"etcd/put.html":{"url":"etcd/put.html","title":"put","keywords":"","body":"package main import ( \"context\" \"fmt\" \"github.com/coreos/etcd/clientv3\" \"time\" ) func main() { var ( config clientv3.Config err error client *clientv3.Client kv clientv3.KV putResp *clientv3.PutResponse ) //配置 config = clientv3.Config{ Endpoints: []string{\"172.16.99.102:2379\"}, DialTimeout: time.Second * 5, } if client, err = clientv3.New(config); err != nil { fmt.Println(err) return } //用于读写etcd的键值对 kv = clientv3.NewKV(client) putResp, err = kv.Put(context.TODO(), \"/cron/jobs/job1\", \"bye\", clientv3.WithPrevKV()) if err != nil { fmt.Println(err) } else { //获取版本信息 fmt.Println(\"Revision:\", putResp.Header.Revision) if putResp.PrevKv != nil { fmt.Println(\"key:\", string(putResp.PrevKv.Key)) fmt.Println(\"Value:\", string(putResp.PrevKv.Value)) fmt.Println(\"Version:\", string(putResp.PrevKv.Version)) } } //ETCDCTL_API=3 etcdctl --endpoints=\"http://172.16.99.102:2379\" get /cron/jobs/job1 } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"etcd/get.html":{"url":"etcd/get.html","title":"get 判断一个key是否存在","keywords":"","body":"package main import ( \"context\" \"fmt\" \"go.etcd.io/etcd/clientv3\" \"time\" ) func main() { cli, err := clientv3.New(clientv3.Config{ Endpoints: []string{\"172.16.99.102:2379\"}, DialTimeout: 5 * time.Second, }) if err != nil { fmt.Println(\"connect failed, err:\", err) return } defer cli.Close() //设置1秒超时，访问etcd有超时控制 ctx, cancel := context.WithTimeout(context.Background(), (time.Duration(10) * time.Second)) //操作etcd //取值，设置超时为1秒 //resp, err := cli.Get(ctx, \"/xxx\") resp, err := cli.Get(ctx, \"/logagent/conf/\") cancel() if err != nil { fmt.Println(\"get failed, err:\", err) return } fmt.Println(len(resp.Kvs)) /* for _, ev := range resp.Kvs { fmt.Printf(\"%s : %s\\n\", ev.Key, ev.Value) } */ } console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}